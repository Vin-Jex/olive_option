{
  "swagger": "2.0",
  "info": {
    "title": "Olive Option API",
    "description": "Welcome to the Olive Option API documentation! This API serves as the backbone for the Olive Option platform, enabling seamless interactions with our services and functionalities. Through this API, developers can manage users, process transactions, and access a wide range of options-related data, making it an essential tool for building applications that integrate with our platform. \n\nKey features include:\n- **User Management**: Create, read, update, and delete user accounts with ease.\n- **Transaction Processing**: Handle financial transactions securely and efficiently.\n- **Options Data Access**: Retrieve real-time information on various options available on our platform.\n\nTo get started, explore the various endpoints available in this documentation. You can also [download the Swagger JSON](https://api-oliveoption.up.railway.app/swagger.json) for a comprehensive view of the API structure. Our API is designed with ease of use and flexibility in mind, providing you with the necessary tools to integrate and enhance your applications. Happy coding!",
    "version": "1.0.0",
    "contact": {
      "name": "Support Team",
      "url": "https://support.oliveoption.com",
      "email": "support@oliveoption.com"
    }
  },
  "host": "api-oliveoption.up.railway.app",
  "basePath": "/",
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Alert"
    },
    {
      "name": "Password Reset"
    },
    {
      "name": "Verify Email"
    },
    {
      "name": "Options"
    },
    {
      "name": "Wallet"
    },
    {
      "name": "Trades"
    },
    {
      "name": "Staff:Auth"
    },
    {
      "name": "Staff:User"
    },
    {
      "name": "Staff:Trade"
    },
    {
      "name": "Staff:Finance"
    },
    {
      "name": "Staff:Faq"
    },
    {
      "name": "Staff:Content"
    },
    {
      "name": "Staff:Promotion"
    },
    {
      "name": "Staff:Setting"
    },
    {
      "name": "Affiliate Users"
    },
    {
      "name": "Affiliate"
    },
    {
      "name": "Affiliate Admin Management"
    },
    {
      "name": "Affiliate - Promo Code"
    },
    {
      "name": "Affiliate - Links"
    },
    {
      "name": "Affiliate - Link Types"
    },
    {
      "name": "Affiliate - Program Types"
    },
    {
      "name": "Affiliate - Telegram Links"
    },
    {
      "name": "Affiliate Tracking Services - Link Clicks"
    },
    {
      "name": "Affiliate Tracking Services - User Activities"
    },
    {
      "name": "Affiliate - Support"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "JWT Authorization header using the Bearer scheme. Example: `Authorization: Bearer {accessToken=<token>;refreshToken=<token>}`"
    }
  },
  "paths": {
    "/user/": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Signup endpoint",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserSignupOrLoginPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserSignupOrLoginPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/password/reset/otp": {
      "post": {
        "tags": [
          "Password Reset",
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordOtpPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/password/reset/verify": {
      "post": {
        "tags": [
          "Password Reset",
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/password/reset": {
      "put": {
        "tags": [
          "Password Reset",
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/email/otp": {
      "post": {
        "tags": [
          "Verify Email",
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/email/verify": {
      "post": {
        "tags": [
          "Verify Email",
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmailVerifyPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/refresh": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/settings": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateUserSettingsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/password": {
      "put": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/upload_pfp": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "profile_pic",
            "in": "formData",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/toggle-live": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to toggle between live and demo mode.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/MeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/options/tickers": {
      "get": {
        "tags": [
          "Options"
        ],
        "description": "List or filter tickers",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListTickersResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/options/ticker/{ticker}": {
      "get": {
        "tags": [
          "Options"
        ],
        "description": "",
        "parameters": [
          {
            "name": "ticker",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTickerResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/options/pin-ticker": {
      "post": {
        "tags": [
          "Options"
        ],
        "description": "Pin a Ticker",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PinTickerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/options/pinned-tickers": {
      "get": {
        "tags": [
          "Options"
        ],
        "description": "List Pinned Tickers",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListPinnedTickersResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/options/pin-ticker/{id}": {
      "delete": {
        "tags": [
          "Options"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/trades/": {
      "get": {
        "tags": [
          "Trades"
        ],
        "description": "Filter Trade History",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "symbol",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "period",
            "in": "query",
            "type": "number"
          },
          {
            "name": "pending",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TradeHistoryResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/trades/leaders": {
      "get": {
        "tags": [
          "Trades"
        ],
        "description": "Get Leaders Board",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetLeadersResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/trades/{id}": {
      "get": {
        "tags": [
          "Trades"
        ],
        "description": "Filter Trade History",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/TradeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/reset-wallet": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "description": "Endpoint to reset wallet",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetWalletResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "description": "Endpoint to get wallet",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user_type",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetWalletResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/transactions": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "description": "List transactions endpoint.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/definitions/ListTransactionsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListTransactionsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/get-transaction/{id}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "description": "Get transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user_type",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTransactionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/init-fund-wallet": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "description": "Init fund wallet",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InitFundWalletPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/InitFundWalletResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/wallet/init-payout": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "description": "Init payout",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "user_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/InitPayoutPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/InitPayoutResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/alert/": {
      "post": {
        "tags": [
          "Alert"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAlertPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetAlertResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Alert"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListAlertsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/alert/{id}": {
      "put": {
        "tags": [
          "Alert"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateAlertPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetAlertResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Alert"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Alert"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetAlertResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/user/": {
      "get": {
        "tags": [
          "Staff:User"
        ],
        "description": "List users",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:User"
        ],
        "description": "Create User",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/user/{id}": {
      "get": {
        "tags": [
          "Staff:User"
        ],
        "description": "Get User by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetUserResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/user/{id}/status/toggle": {
      "put": {
        "tags": [
          "Staff:User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/finance/{id}/user": {
      "get": {
        "tags": [
          "Staff:Finance"
        ],
        "description": "List user transaction history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserTradeHistoryResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/finance/wallets": {
      "get": {
        "tags": [
          "Staff:Finance"
        ],
        "description": "List wallets",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "user_id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListWalletsResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/finance/dashboard": {
      "get": {
        "tags": [
          "Staff:Finance"
        ],
        "description": "Financial dashboard",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StaffFinanceDashboardResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/finance/{id}": {
      "get": {
        "tags": [
          "Staff:Finance"
        ],
        "description": "Get transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StaffGetTransactionResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/finance/": {
      "get": {
        "tags": [
          "Staff:Finance"
        ],
        "description": "List transactions",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "user_id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "transaction_type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "transaction_status",
            "in": "query",
            "type": "string"
          },
          {
            "name": "period",
            "in": "query",
            "type": "string"
          },
          {
            "name": "payment_method",
            "in": "query",
            "type": "string"
          },
          {
            "name": "min_amount",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StaffListTransactionsResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/trade/pair": {
      "get": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListTradePairsResponse"
            },
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateTradePairPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTradePairResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/trade/pair/{id}": {
      "get": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTradePairResponse"
            },
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateTradePairPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTradePairResponse"
            },
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/trade/{id}/user": {
      "get": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "List user trade history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserTradeHistoryResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/trade/": {
      "get": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "List trade history",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserTradeHistoryResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/trade/{id}": {
      "get": {
        "tags": [
          "Staff:Trade"
        ],
        "description": "Get trade",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StaffGetTradeResponse"
            },
            "description": "OK"
          }
        }
      }
    },
    "/staff/faq/": {
      "get": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Endpoint to list faqs(open for everyone)",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "category",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListFaqsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Create Faq",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateFaqPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFaqResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/faq/{id}/open": {
      "get": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Get Faq(open to everyone)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFaqResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/faq/category": {
      "post": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Create Faq Category",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateFaqCategoryPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFaqCategoryResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Endpoint to list faq categories",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListFaqCategoriesResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/faq/category/{id}": {
      "delete": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Delete Faq Category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Edit Faq Catgory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateFaqCategoryPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFaqCategoryResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/faq/{id}": {
      "put": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Edit Faq",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateFaqPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetFaqResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Faq"
        ],
        "description": "Delete Faq",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/content/{user_category}/{category}": {
      "get": {
        "tags": [
          "Staff:Content"
        ],
        "description": "",
        "parameters": [
          {
            "name": "user_category",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "category",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetContentResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/content/": {
      "post": {
        "tags": [
          "Staff:Content"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "document",
            "in": "formData",
            "type": "file",
            "required": true
          },
          {
            "name": "user_category",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "category",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "content",
            "in": "formData",
            "type": "text",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetContentResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/content/{id}": {
      "delete": {
        "tags": [
          "Staff:Content"
        ],
        "description": "Delete Content",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/promotion/section": {
      "get": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListPromotionSectionsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "thumbnail",
            "in": "formData",
            "type": "file",
            "required": true
          },
          {
            "name": "name",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "type",
            "in": "formData",
            "type": "text",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPromotionSectionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/promotion/section/{id}": {
      "get": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPromotionSectionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "thumbnail",
            "in": "formData",
            "type": "file",
            "required": true
          },
          {
            "name": "name",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "type",
            "in": "formData",
            "type": "text",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPromotionSectionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/promotion/": {
      "get": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "section_id",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListMaterialsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "media",
            "in": "formData",
            "type": "file",
            "required": true
          },
          {
            "name": "type",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "language",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "size",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "section_id",
            "in": "formData",
            "type": "text",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetMaterialResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/promotion/{id}": {
      "get": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetMaterialResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "media",
            "in": "formData",
            "type": "file",
            "required": true
          },
          {
            "name": "type",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "language",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "size",
            "in": "formData",
            "type": "text",
            "required": true
          },
          {
            "name": "section_id",
            "in": "formData",
            "type": "text",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetMaterialResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Promotion"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/": {
      "get": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Get Global Settings",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GlobalSettingsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Create or Update Global Settings",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateSettingsPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GlobalSettingsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/comission": {
      "get": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "List comission",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListComissionsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Create comission exception",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateComissionPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetComissionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/ip": {
      "post": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Block Ip",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BlockIpPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "List blocked ips",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListBlockedIps"
            },
            "description": "OK",
            "in": "body"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/ip/{id}": {
      "delete": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/profit": {
      "post": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Create profit outcome",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateProfitOutcomePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateProfitOutcomeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "List custom profit outcomes",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListCustomProfitOutcomeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/profit/{id}": {
      "put": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Edit profit outcome",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateProfitOutcomePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateProfitOutcomeResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/setting/comission/{id}": {
      "put": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "Edit comission exception",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateComissionPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetComissionResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Staff:Setting"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/login": {
      "post": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserSignupOrLoginPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/password/otp": {
      "post": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Start password change process",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordOtpPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/password/otp/verify": {
      "post": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Verify password reset otp",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ResetPasswordVerifyResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/password": {
      "post": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Reset Password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ResetPasswordPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Change Password",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ChangePasswordPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/": {
      "get": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "List staffs",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          },
          {
            "name": "user",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "affiliate",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "trade",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "promotional",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "is_admin",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListStaffsResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Update Info",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateStaffPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetStaffResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Create Staff",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateStaffPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/{id}/activity": {
      "get": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "List staff activity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "size",
            "in": "query",
            "type": "number"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "asc or desc"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ListStaffActivitiesResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/dashboard": {
      "get": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Get Basic Staff Dashboard Stats",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/StaffAuthDashboardResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Get Staff By Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GetStaffResponse"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "Update staff permission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/{id}/role/toggle": {
      "put": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/staff/{id}/status/toggle": {
      "put": {
        "tags": [
          "Staff:Auth"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/RequestSuccessful"
            },
            "description": "OK"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BadRequest"
            },
            "description": "Bad Request"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Unauthorized",
              "ifStatusPresent": true
            },
            "description": "Unauthorized"
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/Forbidden",
              "ifStatusPresent": true
            },
            "description": "Forbidden"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            },
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/affiliates/": {
      "post": {
        "tags": [
          "Affiliate"
        ],
        "description": "Create a new affiliate (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAffiliatePayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate"
        ],
        "description": "Get a paginated list of affiliates (requires authentication)",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPaginatedAffiliatesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliates/{id}": {
      "get": {
        "tags": [
          "Affiliate"
        ],
        "description": "Get an affiliate by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate"
        ],
        "description": "Update an affiliate by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAffiliatePayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate"
        ],
        "description": "Delete an affiliate by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteAffiliateResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/signup": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Creates a new affiliate user.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/signin": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Authenticates an affiliate user and provides an access token.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SigninAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/logout": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Logs out an affiliate user by invalidating the token.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogoutAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LogoutAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/verify-email": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Verifies an affiliate user's email using a verification code.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyEmailAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VerifyEmailAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/verify-otp": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Verifies an affiliate user's OTP using a verification code.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerifyOtpAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VerifyOtpAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/resend-verification-code": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Resends a verification code to the provided email for account verification.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendVerificationCodeAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResendVerificationCodeAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/resend-otp-code": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Resends a verification code to the provided email for password reset.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResendVerificationCodeAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResendVerificationCodeAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/send-password-otp": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Sends a one-time password (OTP) to the user for password change.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendPasswordChangeOtpAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SendPasswordChangeOtpAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/change-password": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Changes the user's password using the OTP and new password.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ChangePasswordAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/refresh-token": {
      "post": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Refreshes the access token using the provided refresh token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshTokenAffiliateUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RefreshTokenAffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/paginated": {
      "get": {
        "tags": [
          "Affiliate Admin Management"
        ],
        "description": "Fetches a paginated list of affiliate users with optional filtering and sorting.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to retrieve (1-based index)."
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to retrieve per page."
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Optional filters for the results. Expected structure: { active: boolean, searchQuery: string, sortBy: string, sortOrder: string, tier_level: string, total_referrals: number }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPaginatedAffiliateUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/download-csv": {
      "get": {
        "tags": [
          "Affiliate Admin Management"
        ],
        "description": "Downloads a CSV file containing affiliate users based on paginated or filtered query results.",
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to retrieve (1-based index)."
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to retrieve per page."
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Optional filters for the results. Expected structure: { active: boolean, searchQuery: string, sortBy: string, sortOrder: string, tier_level: string, total_referrals: number }"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "string"
                },
                "description": {
                  "type": "string",
                  "example": "The CSV file of affiliate users."
                },
                "format": {
                  "type": "string",
                  "example": "binary"
                },
                "example": {
                  "type": "string",
                  "example": "id,full_name,email,referral_code,is_active,is_verified,verification_code,last_login,tier_level,total_referrals,referral_code,country,date_of_birth,phone_number,created_at,updated_at  2,John Doe,johndoe@example.com,,true,false,6165,,1,0,REF123,,null,null,null,2024-10-20T01:38:45.901Z,2024-10-20T01:38:45.901Z  4,Bob Johnson,bob@example.com,,false,false,5678,,1,2,REF456,Canada,1992-11-30,555-5678,2024-10-20T01:38:45.901Z,2024-10-20T01:38:45.901Z  "
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/me": {
      "get": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Fetch the logged-in user's information.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateUserResponse"
            }
          },
          "404": {
            "description": "User Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Update the logged-in user's information.",
        "responses": {
          "200": {
            "description": "User Updated Successfully",
            "schema": {
              "$ref": "#/definitions/AffiliateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/UpdateAffiliateUserRequest"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Delete an authorized user account.",
        "responses": {
          "204": {
            "description": "User Account Deleted Successfully."
          },
          "400": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/restore/{id}": {
      "post": {
        "tags": [
          "Affiliate Admin Management"
        ],
        "description": "Restore a deleted user account by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user to restore."
          }
        ],
        "responses": {
          "200": {
            "description": "User Account Restored Successfully",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateUserResponse"
            }
          },
          "400": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/top-affiliates": {
      "get": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Fetch the top 10 affiliate users based on tier level and total referrals.",
        "responses": {
          "200": {
            "description": "Top Affiliates Fetched Successfully",
            "schema": {
              "$ref": "#/definitions/TopAffiliateUsersResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/activities": {
      "post": {
        "tags": [
          "Affiliate User Activities"
        ],
        "description": "Create a new activity for the logged-in user. This is for the authenticated users only.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Created Successfully",
            "schema": {
              "$ref": "#/definitions/AffiliateActivityResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/CreateAffiliateActivityRequest"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate User Activities"
        ],
        "description": "Retrieve the activities for the logged-in user, with optional filters.",
        "parameters": [
          {
            "name": "activityType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The type of activity to filter by. The activity type can be one of the following types: sign_in, sign_up, password_change, account_verification, referral_signup, logout. Each activity type represents a distinct user action within the affiliate tracking system."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "Start date to filter activities."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": "End date to filter activities."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to retrieve."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Activities Retrieved Successfully",
            "schema": {
              "$ref": "#/definitions/GetAllAffiliateActivitiesResponse"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/{id}/referrals": {
      "get": {
        "tags": [
          "Affiliate Admin Management"
        ],
        "description": "Fetches paginated referrals for a user by user ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the user to fetch referrals for."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to retrieve (1-based index).",
            "default": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to retrieve per page.",
            "default": 10
          },
          {
            "name": "tokens",
            "in": "header",
            "required": false,
            "description": "Authentication tokens.",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "refreshToken": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPaginatedUserReferralsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/{id}": {
      "get": {
        "tags": [
          "Affiliate Admin Management"
        ],
        "description": "Get an affiliate user by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the affiliate user to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateUserByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-users/validate-referral/{referralCode}": {
      "get": {
        "tags": [
          "Affiliate Users"
        ],
        "description": "Validates an affiliate referral code.",
        "parameters": [
          {
            "name": "referralCode",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The referral code to validate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Referral ID is valid.",
            "schema": {
              "$ref": "#/definitions/ValidateReferralCodeResponse"
            }
          },
          "400": {
            "description": "Invalid referral code or missing parameter.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-promo-code/": {
      "post": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Create a new promo code (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating a new promo code. This should include the code, expiry date, usage limit, discount amount, and activation status. The promo code must be unique and 3 digits long because a unique 4-digit code will be attached to it, making its total length 7. The expiry date should be set in the future. The usage limit defines how many times the promo code can be used, while the discount amount specifies the monetary value of the discount to be applied.",
            "schema": {
              "$ref": "#/definitions/CreatePromoCodePayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatePromoCodeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Get all promo codes (requires authentication)",
        "parameters": [
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllPromoCodesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-promo-code/{id}": {
      "get": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Get a promo code by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPromoCodeByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Update a promo code by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for updating an existing promo code. This should include the promo code details that need to be updated, such as the expiry date, usage limit, discount amount, and activation status. All fields are optional; however, at least one field must be provided to perform the update. The promo code itself remains unchanged unless specifically included in the payload.",
            "schema": {
              "$ref": "#/definitions/UpdatePromoCodePayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdatePromoCodeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Delete a promo code by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletePromoCodeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-promo-code/validate": {
      "post": {
        "tags": [
          "Affiliate - Promo Code"
        ],
        "description": "Validate a promo code (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidatePromoCodePayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Valid",
            "schema": {
              "$ref": "#/definitions/ValidatePromoCodeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link/": {
      "post": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Create a new affiliate link (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating a new affiliate link, including the link data and optional promo code.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateLinkPayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateLinkResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Get all affiliate links (requires authentication)",
        "parameters": [
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllAffiliateLinksResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link/paginated": {
      "get": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Fetch a paginated list of affiliate links (requires authentication)",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to fetch (1-based index). Defaults to 1.",
            "example": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to fetch per page. Defaults to 10.",
            "example": 10
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional search term to filter results by affiliate link fields (e.g., link, comment, etc.).",
            "example": "affiliate"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional field to sort the results by (e.g., created_at, link). Defaults to created_at.",
            "example": "created_at"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Optional sorting order: ASC for ascending, DESC for descending. Defaults to DESC.",
            "example": "DESC"
          },
          {
            "name": "affiliateProgramId",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Optional filter to return affiliate links associated with a specific affiliate program ID.",
            "example": 5
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication (optional)."
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPaginatedAffiliateLinksResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link/{id}": {
      "get": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Get an affiliate link by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateLinkByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Update an affiliate link by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for updating an existing affiliate link. This should include the link details that need to be updated.",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateLinkPayload"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateLinkResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate - Links"
        ],
        "description": "Delete an affiliate link by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link-type/": {
      "post": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Create a new link type (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating a new link type, including the name.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateLinkTypePayload",
              "description": "The name of the link type"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateLinkTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Get all link types (requires authentication)",
        "parameters": [
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllAffiliateLinkTypesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link-type/{id}": {
      "put": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Update a link type by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for updating an existing link type. This should include the updated name.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateLinkTypePayload",
              "description": "The updated name of the link type"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateLinkTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Delete a link type by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Get a link type by ID (requires authentication and validates ID)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateLinkTypeByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-link-type/validate": {
      "post": {
        "tags": [
          "Affiliate - Link Types"
        ],
        "description": "Validate a link type by name (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for validating a link type, including the name.",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "description": {
                          "type": "string",
                          "example": "The name of the link type to validate"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "name"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateAffiliateLinkTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-program-type/": {
      "post": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Create a new Affiliate program (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating a new Affiliate program, including the program name.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateProgramTypePayload",
              "description": "The name of the Affiliate program"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateProgramTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Get all Affiliate programs (requires authentication)",
        "parameters": [
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllAffiliateProgramTypesResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-program-type/{id}": {
      "put": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Update an Affiliate program by ID (requires authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for updating the Affiliate program, including the updated name.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateProgramTypePayload",
              "description": "The updated name of the Affiliate program"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateProgramTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Delete an Affiliate program by ID (requires authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Get an Affiliate program by ID (requires authentication)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateProgramTypeByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-program-type/validate": {
      "post": {
        "tags": [
          "Affiliate - Program Types"
        ],
        "description": "Validate an Affiliate program by name (requires authentication)",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for validating the Affiliate program, including the program name.",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "description": {
                          "type": "string",
                          "example": "The name of the Affiliate program to validate"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "name"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ValidateAffiliateProgramTypeResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate/telegram/": {
      "post": {
        "tags": [
          "Affiliate - Telegram Links"
        ],
        "description": "  <p>Create a new Affiliate Telegram link (requires authentication). Acceptable user types are: AffiliateUser, Staff, or User.</p>    <p><strong>Frontend to Backend Request:</strong> The frontend request (linkTelegramAccount function) notifies the server of the user's intent to link their Telegram account. It includes the userId, userType, and authentication tokens needed for backend verification.</p>   <p><strong>Backend Response & User Action:</strong> After receiving the request, the backend responds with a deep link to the Telegram bot (e.g., https://t.me/olive_cherry_bot). The user must click this link to initiate the linking process in Telegram.</p>   <p><strong>Telegram Bot Interaction:</strong></p>  <ul>  <li>When the user clicks the bot link, Telegram opens, and the user can send one of the following commands to link or unlink their account:</li>  <ul>  <li><code>/start</code> - Start the bot interaction.</li>  <li><code>link my account</code> / <code>link account</code> / <code>link</code> - Link the user’s account.</li>  <li><code>/unlink</code> / <code>no</code> / <code>not now</code> / <code>cancel</code> - Unlink the user’s account.</li>  </ul>  <li>The backend listens for these commands from the Telegram webhook, processes the action, and completes or cancels the link based on the user’s input.</li>  </ul>   <p>After the Telegram interaction, the frontend can make a GET request to <code>/affiliate/telegram/</code> with the <strong>token</strong> to verify the link status and update the UI accordingly.</p>   <p><strong>Acceptable user types:</strong></p>  <ul>  <li><strong>AffiliateUser</strong> — Represents an affiliate user.</li>  <li><strong>Staff</strong> — Represents an internal staff member.</li>  <li><strong>User</strong> — Represents a regular user in the system.</li>  </ul>  ",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating a new Affiliate Telegram link, including the user type. Valid user types are: AffiliateUser, Staff, or User.",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateTelegramLinkPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateTelegramLinkResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate - Telegram Links"
        ],
        "description": "Retrieve all Affiliate Telegram links for a user (requires authentication). Acceptable user types are: 'AffiliateUser', 'Staff', or 'User'.",
        "parameters": [
          {
            "name": "userType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by user type (AffiliateUser, Staff, or User)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllAffiliateTelegramLinksResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate/telegram/{userType}": {
      "get": {
        "tags": [
          "Affiliate - Telegram Links"
        ],
        "description": "Retrieve an Affiliate Telegram link by user ID and user type (requires authentication). Acceptable user types are: 'AffiliateUser', 'Staff', or 'User'.",
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User type to retrieve link for (AffiliateUser, Staff, or User)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateTelegramLinkByIdResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate - Telegram Links"
        ],
        "description": "Update an existing Affiliate Telegram link (requires authentication). Acceptable user types are: 'AffiliateUser', 'Staff', or 'User'.",
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User type to update link for (AffiliateUser, Staff, or User)"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for updating the Affiliate Telegram link.",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateTelegramLinkPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateTelegramLinkResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate - Telegram Links"
        ],
        "description": "Delete an Affiliate Telegram link by user ID and user type (requires authentication). Acceptable user types are: 'AffiliateUser', 'Staff', or 'User'.",
        "parameters": [
          {
            "name": "userType",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User type to delete link for (AffiliateUser, Staff, or User)"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-clicks/": {
      "post": {
        "tags": [
          "Affiliate Tracking Services - Link Clicks"
        ],
        "description": "Creates a new affiliate click record.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAffiliateClickPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateAffiliateClickResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate Tracking Services - Link Clicks"
        ],
        "description": "Fetches a list of all affiliate clicks.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to fetch (1-based index). Defaults to 1.",
            "example": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to fetch per page. Defaults to 10.",
            "example": 10
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional search term to filter results by affiliate link fields (e.g., link, comment, etc.).",
            "example": "affiliate"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional field to sort the results by (e.g., created_at, link). Defaults to created_at.",
            "example": "created_at"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Optional sorting order: ASC for ascending, DESC for descending. Defaults to DESC.",
            "example": "DESC"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication (optional)."
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateClicksResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-clicks/{id}": {
      "get": {
        "tags": [
          "Affiliate Tracking Services - Link Clicks"
        ],
        "description": "Fetches an affiliate click record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affiliate click record."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAffiliateClickByIdResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate Tracking Services - Link Clicks"
        ],
        "description": "Updates an affiliate click record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affiliate click record."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateClickPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateAffiliateClickResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate Tracking Services - Link Clicks"
        ],
        "description": "Deletes an affiliate click record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affiliate click record."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteAffiliateClickResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-activities/": {
      "post": {
        "tags": [
          "Affiliate Tracking Services - User Activities"
        ],
        "description": "Creates a new activity record. The activity can be one of the following types: SIGN_IN, SIGN_UP, PASSWORD_CHANGE, ACCOUNT_VERIFICATION, REFERRAL, LOGOUT. Each activity type represents a distinct user action within the affiliate tracking system.",
        "parameters": [
          {
            "name": "user-agent",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActivityPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity record successfully created.",
            "schema": {
              "$ref": "#/definitions/CreateActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request. This response indicates that the provided data is invalid or missing required fields.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized. The request lacks valid authentication credentials.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden. The user does not have permission to perform this action.",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error. An unexpected error occurred while processing the request.",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Affiliate Tracking Services - User Activities"
        ],
        "description": "Fetches a list of all activities.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number to fetch (1-based index). Defaults to 1.",
            "example": 1
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The number of records to fetch per page. Defaults to 10.",
            "example": 10
          },
          {
            "name": "searchQuery",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional search term to filter results by activity fields.",
            "example": "login"
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication (optional)."
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllActivitiesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-activities/clicks-stat": {
      "get": {
        "tags": [
          "Affiliate Tracking Services - Clicks and Referrals"
        ],
        "description": "Fetches user clicks grouped by date.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUserClicksResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request lacks valid authentication credentials.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-activities/referrals-stat": {
      "get": {
        "tags": [
          "Affiliate Tracking Services - Clicks and Referrals"
        ],
        "description": "Fetches user referrals grouped by date.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUserReferralsStatsResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request lacks valid authentication credentials.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-activities/clicks-and-referrals-stats": {
      "get": {
        "tags": [
          "Affiliate Tracking Services - Clicks and Referrals"
        ],
        "description": "Fetches both user clicks and referrals grouped by date.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUserClicksAndReferralsStatsResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request lacks valid authentication credentials.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-activities/{id}": {
      "get": {
        "tags": [
          "Affiliate Tracking Services - User Activities"
        ],
        "description": "Fetches an activity record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the activity record."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetActivityByIdResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate Tracking Services - User Activities"
        ],
        "description": "Updates an activity record by its ID. The activity can be one of the following types: SIGN_IN, SIGN_UP, PASSWORD_CHANGE, ACCOUNT_VERIFICATION, REFERRAL, LOGOUT. Each activity type represents a distinct user action within the affiliate tracking system.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the activity record."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateActivityPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateActivityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate Tracking Services - User Activities"
        ],
        "description": "Deletes an activity record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the activity record."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteActivityResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-postback/": {
      "post": {
        "tags": [
          "Affiliate Postbacks"
        ],
        "description": "Creates a new postback record.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePostbackPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatePostbackResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-postback/me/": {
      "get": {
        "tags": [
          "Affiliate Postbacks"
        ],
        "description": "Fetches all postbacks for a specific user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPostbacksByUserIdResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/affiliate-postback/{id}": {
      "get": {
        "tags": [
          "Affiliate Postbacks"
        ],
        "description": "Fetches a postback by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique identifier of the postback record.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPostbackByIdResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Postback not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Affiliate Postbacks"
        ],
        "description": "Updates a postback record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique identifier of the postback record.",
            "example": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePostbackPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdatePostbackResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Postback not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Affiliate Postbacks"
        ],
        "description": "Deletes a postback record by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique identifier of the postback record.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeletePostbackResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Postback not found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/support": {
      "post": {
        "tags": [
          "Affiliate - Support"
        ],
        "description": "Submit a support message.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for creating sending a support request.",
            "schema": {
              "$ref": "#/definitions/SupportMessageRequest"
            }
          },
          {
            "name": "accessToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Access token for authentication"
          },
          {
            "name": "refreshToken",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Refresh token for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Support message received successfully.",
            "schema": {
              "$ref": "#/definitions/SupportMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/submit": {
      "post": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Submit KYC (requires authentication)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Payload for submitting KYC, including document type, and front & back file.",
            "schema": {
              "$ref": "#/definitions/SubmitKYC"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubmitKYCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/user": {
      "get": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Get KYC information for the authenticated user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUserKYCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/all": {
      "get": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Get all KYCs (requires admin privileges)",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetAllKYCsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/verify/{kycId}": {
      "put": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Verify KYC by ID (requires admin privileges)",
        "parameters": [
          {
            "name": "kycId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The KYC ID to verify"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VerifyKYCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/reject/{kycId}": {
      "put": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Reject KYC by ID (requires admin privileges)",
        "parameters": [
          {
            "name": "kycId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The KYC ID to reject"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Reason for rejection"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RejectKYCResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    },
    "/kyc/delete/{kycId}": {
      "delete": {
        "tags": [
          "KYC - Verification"
        ],
        "description": "Delete KYC by ID (requires admin privileges)",
        "parameters": [
          {
            "name": "kycId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The KYC ID to delete"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "RequestSuccessful": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "status": {
          "type": "number",
          "example": 200
        }
      }
    },
    "InternalServerError": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Sorry an internal server error occured."
        },
        "status": {
          "type": "number",
          "example": 500
        }
      }
    },
    "BadRequest": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "string"
        },
        "status": {
          "type": "number",
          "example": 400
        }
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Unauthorized request"
        },
        "status": {
          "type": "number",
          "example": 401
        }
      }
    },
    "NotFound": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Information not found"
        },
        "status": {
          "type": "number",
          "example": 404
        }
      }
    },
    "Forbidden": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Access forbidden"
        },
        "status": {
          "type": "number",
          "example": 403
        }
      }
    },
    "UserSignupOrLoginPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "string"
        },
        "password": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "UserLoginResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "tokens": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "string",
                  "example": "string"
                },
                "refresh": {
                  "type": "string",
                  "example": "token"
                }
              }
            }
          }
        }
      }
    },
    "ResetPasswordOtpPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "ResetPasswordVerifyPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "string"
        },
        "otp": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "ResetPasswordVerifyResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "string"
            }
          }
        }
      }
    },
    "ResetPasswordPayload": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "string"
        },
        "password": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "EmailVerifyPayload": {
      "type": "object",
      "properties": {
        "otp": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "MeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "first_name": {
                  "type": "string",
                  "example": "Femi"
                },
                "last_name": {
                  "type": "string",
                  "example": "Fatokun"
                },
                "email": {
                  "type": "string",
                  "example": "fatokunfemi03@gmail.com"
                },
                "phone": {
                  "type": "string",
                  "example": "+2349047238648"
                },
                "date_of_birth": {
                  "type": "string",
                  "example": "2000-08-13T00:00:00.000Z"
                },
                "country": {
                  "type": "string",
                  "example": "NG"
                },
                "livemode": {
                  "type": "boolean",
                  "example": false
                },
                "is_disabled": {
                  "type": "boolean",
                  "example": false
                },
                "is_email_verified": {
                  "type": "boolean",
                  "example": false
                },
                "last_login_at": {},
                "created_at": {
                  "type": "string",
                  "example": "2024-08-12T14:31:20.545Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-08-13T08:44:04.372Z"
                },
                "role": {
                  "type": "string",
                  "example": "user"
                },
                "deleted_at": {},
                "settings": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "language": {
                      "type": "string",
                      "example": "English"
                    },
                    "enable_sound": {
                      "type": "boolean",
                      "example": true
                    },
                    "email_notification": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {},
                    "updated_at": {
                      "type": "string",
                      "example": "2024-08-13T08:57:52.603Z"
                    },
                    "deleted_at": {},
                    "user_id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "UpdateUserPayload": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "string"
        },
        "last_name": {
          "type": "string",
          "example": "string"
        },
        "date_of_birth": {
          "type": "string",
          "example": "Date"
        },
        "country": {
          "type": "string",
          "example": "string"
        },
        "phone": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "UpdateUserSettingsPayload": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "example": "string"
        },
        "enable_sound": {
          "type": "string",
          "example": "boolean"
        },
        "email_notification": {
          "type": "string",
          "example": "boolean"
        }
      }
    },
    "UpdatePasswordPayload": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "example": "string"
        },
        "new_password": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "GetWalletResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "body": {
          "type": "object",
          "properties": {
            "wallet": {
              "type": "object",
              "properties": {
                "balance": {
                  "type": "string",
                  "example": "0.00"
                },
                "id": {
                  "type": "number",
                  "example": 1
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "livemode": {
                  "type": "boolean",
                  "example": false
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-08-28T10:54:43.814Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-08-28T10:54:43.814Z"
                }
              }
            }
          }
        }
      }
    },
    "TradeHistoryPayload": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "example": "number"
        },
        "offset": {
          "type": "string",
          "example": "number"
        },
        "period": {
          "type": "string",
          "example": "number"
        },
        "pending": {
          "type": "string",
          "example": "boolean"
        },
        "symbol": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "SingleIdPayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "TradeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "trade": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "symbol": {
                  "type": "string",
                  "example": "A"
                },
                "start_time": {
                  "type": "string",
                  "example": "2024-09-04T16:46:36.069Z"
                },
                "expiry_time": {
                  "type": "string",
                  "example": "2024-09-04T16:47:00.000Z"
                },
                "amount": {
                  "type": "string",
                  "example": "1000.00"
                },
                "prediction": {
                  "type": "string",
                  "example": "higher"
                },
                "prediction_correct": {},
                "status": {
                  "type": "string",
                  "example": "waiting"
                },
                "initial_value": {
                  "type": "string",
                  "example": "39510428039.21"
                },
                "completed_value": {},
                "livemode": {
                  "type": "boolean",
                  "example": false
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-09-04T16:46:37.234Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-09-04T16:46:37.234Z"
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "transaction_id": {
                  "type": "number",
                  "example": 1
                }
              }
            }
          }
        }
      }
    },
    "ListTransactionsPayload": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "example": "number"
        },
        "offset": {
          "type": "string",
          "example": "number"
        },
        "type": {
          "type": "string",
          "example": "transaction_type"
        },
        "status": {
          "type": "string",
          "example": "transaction_statuses"
        },
        "date_from": {
          "type": "string",
          "example": "Date"
        },
        "date_to": {
          "type": "string",
          "example": "Date"
        }
      }
    },
    "ListTransactionsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "example": 20
            },
            "offset": {
              "type": "number",
              "example": 0
            },
            "total_count": {
              "type": "number",
              "example": 2
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 15
                  },
                  "ref": {
                    "type": "string",
                    "example": "1725632897484-1725632940000-15-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "amount": {
                    "type": "string",
                    "example": "1900.00"
                  },
                  "type": {
                    "type": "string",
                    "example": "credit"
                  },
                  "status": {
                    "type": "string",
                    "example": "completed"
                  },
                  "metadata": {
                    "type": "string",
                    "example": "{\"order_id\":13}"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": false
                  },
                  "desc": {
                    "type": "string",
                    "example": "Reward for correct prediction."
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-09-04T17:56:01.168Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-06T14:28:18.653Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "wallet_id": {
                    "type": "number",
                    "example": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "GetTransactionResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "transaction": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "ref": {
                  "type": "string",
                  "example": "1725468396069-1725468420000-1-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "amount": {
                  "type": "string",
                  "example": "1000.00"
                },
                "type": {
                  "type": "string",
                  "example": "debit"
                },
                "status": {
                  "type": "string",
                  "example": "completed"
                },
                "metadata": {
                  "type": "string",
                  "example": "{}"
                },
                "livemode": {
                  "type": "boolean",
                  "example": false
                },
                "desc": {
                  "type": "string",
                  "example": "Payment for options contract."
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-09-04T16:46:37.219Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-09-04T16:46:37.239Z"
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "wallet_id": {},
                "order": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "symbol": {
                      "type": "string",
                      "example": "A"
                    },
                    "start_time": {
                      "type": "string",
                      "example": "2024-09-04T16:46:36.069Z"
                    },
                    "expiry_time": {
                      "type": "string",
                      "example": "2024-09-04T16:47:00.000Z"
                    },
                    "amount": {
                      "type": "string",
                      "example": "1000.00"
                    },
                    "prediction": {
                      "type": "string",
                      "example": "higher"
                    },
                    "prediction_correct": {},
                    "status": {
                      "type": "string",
                      "example": "waiting"
                    },
                    "initial_value": {
                      "type": "string",
                      "example": "39510428039.21"
                    },
                    "completed_value": {},
                    "livemode": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-09-04T16:46:37.234Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-09-04T16:46:37.234Z"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "transaction_id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "TradeHistoryResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "example": 20
            },
            "offset": {
              "type": "number",
              "example": 0
            },
            "total_count": {
              "type": "number",
              "example": 16
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "trades": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 16
                  },
                  "symbol": {
                    "type": "string",
                    "example": "A"
                  },
                  "start_time": {
                    "type": "string",
                    "example": "2024-09-06T14:31:24.246Z"
                  },
                  "expiry_time": {
                    "type": "string",
                    "example": "2024-09-06T14:32:00.000Z"
                  },
                  "amount": {
                    "type": "string",
                    "example": "1000.00"
                  },
                  "prediction": {
                    "type": "string",
                    "example": "higher"
                  },
                  "prediction_correct": {
                    "type": "boolean",
                    "example": true
                  },
                  "status": {
                    "type": "string",
                    "example": "evaluated"
                  },
                  "initial_value": {
                    "type": "string",
                    "example": "39754656559.56"
                  },
                  "completed_value": {
                    "type": "string",
                    "example": "39754656559.56"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": false
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-09-06T14:31:25.576Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-06T14:33:42.468Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "transaction_id": {
                    "type": "number",
                    "example": 18
                  }
                }
              }
            }
          }
        }
      }
    },
    "ListStaffsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 2
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "staffs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "full_name": {
                    "type": "string",
                    "example": "Finance Staff"
                  },
                  "email": {
                    "type": "string",
                    "example": "finance@oliveoption.com"
                  },
                  "pfp_url": {},
                  "is_admin": {
                    "type": "boolean",
                    "example": false
                  },
                  "is_active": {
                    "type": "boolean",
                    "example": true
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-02T09:30:16.778Z"
                  },
                  "last_login": {},
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-02T09:30:16.778Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "ListStaffActivitiesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 0
            },
            "total_pages": {
              "type": "number",
              "example": 0
            },
            "activities": {
              "type": "array",
              "example": [],
              "items": {}
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "GetStaffResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "staff": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "full_name": {
                  "type": "string",
                  "example": "Finance Staff"
                },
                "email": {
                  "type": "string",
                  "example": "finance@oliveoption.com"
                },
                "pfp_url": {},
                "is_admin": {
                  "type": "boolean",
                  "example": false
                },
                "is_active": {
                  "type": "boolean",
                  "example": true
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-02T09:30:16.778Z"
                },
                "last_login": {},
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-02T09:30:16.778Z"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 2
                    },
                    "user": {
                      "type": "boolean",
                      "example": false
                    },
                    "financial": {
                      "type": "boolean",
                      "example": true
                    },
                    "affiliate": {
                      "type": "boolean",
                      "example": false
                    },
                    "trade": {
                      "type": "boolean",
                      "example": false
                    },
                    "promotional": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-10-02T09:30:16.784Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-10-02T09:30:16.784Z"
                    },
                    "staff_id": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "CreateStaffPayload": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "example": "Finance Staff"
        },
        "email": {
          "type": "string",
          "example": "finance@oliveoption.com"
        },
        "is_admin": {
          "type": "boolean",
          "example": false
        },
        "password": {
          "type": "string",
          "example": "12345678"
        },
        "permissions": {
          "type": "object",
          "properties": {
            "financial": {
              "type": "boolean",
              "example": true
            },
            "user": {
              "type": "boolean",
              "example": false
            },
            "affiliate": {
              "type": "boolean",
              "example": false
            },
            "trade": {
              "type": "boolean",
              "example": false
            },
            "promotional": {
              "type": "boolean",
              "example": false
            }
          }
        }
      }
    },
    "ListUsersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 2
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "users": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "first_name": {
                    "type": "string",
                    "example": "Femi"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Fatokun"
                  },
                  "email": {
                    "type": "string",
                    "example": "fatokunfemi03@gmail.com"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+2349047238648"
                  },
                  "pfp_url": {
                    "type": "string",
                    "example": "https://oliveoption.blob.core.windows.net/default/profile_pics/profile_pic_1723724632731_331371914.png"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "example": "2000-08-13T00:00:00.000Z"
                  },
                  "country": {
                    "type": "string",
                    "example": "NG"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": false
                  },
                  "is_disabled": {
                    "type": "boolean",
                    "example": false
                  },
                  "is_email_verified": {
                    "type": "boolean",
                    "example": true
                  },
                  "is_phone_verified": {
                    "type": "boolean",
                    "example": false
                  },
                  "last_login_at": {
                    "type": "string",
                    "example": "2024-09-29T09:31:58.687Z"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-08-12T14:31:20.545Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-29T09:31:58.688Z"
                  },
                  "deleted_at": {}
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "GetUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "a3a18a4e-6b27-43ff-9efa-81414c581f62"
                },
                "first_name": {},
                "last_name": {},
                "email": {
                  "type": "string",
                  "example": "curious52019@gmail.com"
                },
                "phone": {},
                "pfp_url": {},
                "date_of_birth": {},
                "country": {},
                "livemode": {
                  "type": "boolean",
                  "example": false
                },
                "is_disabled": {
                  "type": "boolean",
                  "example": false
                },
                "is_email_verified": {
                  "type": "boolean",
                  "example": false
                },
                "is_phone_verified": {
                  "type": "boolean",
                  "example": false
                },
                "password_hash": {
                  "type": "string",
                  "example": "$2a$10$gc6ASCG1Nc3U6HuTbUVg/ueEOkxOLPRu6O1Lk539mRo7ZkbvW4PB2"
                },
                "last_login_at": {},
                "created_at": {
                  "type": "string",
                  "example": "2024-08-23T16:09:24.981Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-08-23T16:09:24.981Z"
                },
                "deleted_at": {}
              }
            }
          }
        }
      }
    },
    "CreateUserPayload": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "example": "Femi Fatokun"
        },
        "email": {
          "type": "string",
          "example": "curious52022@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "12345678"
        }
      }
    },
    "UserTradeHistoryResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 16
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "trades": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "symbol": {
                    "type": "string",
                    "example": "A"
                  },
                  "start_time": {
                    "type": "string",
                    "example": "2024-09-04T16:46:36.069Z"
                  },
                  "expiry_time": {
                    "type": "string",
                    "example": "2024-09-04T16:47:00.000Z"
                  },
                  "amount": {
                    "type": "string",
                    "example": "1000.00"
                  },
                  "prediction": {
                    "type": "string",
                    "example": "higher"
                  },
                  "prediction_correct": {},
                  "status": {
                    "type": "string",
                    "example": "waiting"
                  },
                  "initial_value": {
                    "type": "string",
                    "example": "39510428039.21"
                  },
                  "completed_value": {},
                  "livemode": {
                    "type": "boolean",
                    "example": false
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-09-04T16:46:37.234Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-04T16:46:37.234Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "transaction_id": {
                    "type": "number",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "StaffAuthDashboardResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "total_no_active_users": {
              "type": "number",
              "example": 2
            },
            "total_no_users": {
              "type": "number",
              "example": 2
            },
            "total_no_pending_payouts": {
              "type": "number",
              "example": 0
            },
            "total_no_pending_withdrawals": {
              "type": "number",
              "example": 0
            }
          }
        }
      }
    },
    "StaffListTransactionsEndpoint": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 18
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 19
                  },
                  "ref": {
                    "type": "string",
                    "example": "1725633120000-16-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "amount": {
                    "type": "string",
                    "example": "1900.00"
                  },
                  "type": {
                    "type": "string",
                    "example": "credit"
                  },
                  "status": {
                    "type": "string",
                    "example": "completed"
                  },
                  "metadata": {
                    "type": "string",
                    "example": "{\"order_id\":16}"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": false
                  },
                  "desc": {
                    "type": "string",
                    "example": "Reward for correct prediction."
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-09-06T14:33:42.458Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-06T14:33:42.458Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "wallet_id": {
                    "type": "number",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "ListWalletsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "wallets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "balance": {
                    "type": "string",
                    "example": "98800.00"
                  },
                  "bonus": {
                    "type": "string",
                    "example": "0.00"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": true
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-08-28T10:54:43.814Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-06T14:33:42.471Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "user": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "Femi"
                      },
                      "email": {
                        "type": "string",
                        "example": "fatokunfemi03@gmail.com"
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2024-08-12T14:31:20.545Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "example": "2024-09-29T09:31:58.688Z"
                      },
                      "is_disabled": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "StaffFinanceDashboardResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "total_deposits": {},
            "total_withdrawals": {
              "type": "number",
              "example": 4000
            },
            "total_pending_transactions": {},
            "total_revenue": {
              "type": "number",
              "example": 0
            },
            "total_payout": {
              "type": "number",
              "example": 0
            },
            "total_pending_payout": {
              "type": "number",
              "example": 0
            },
            "total_pending_withdrawal": {}
          }
        }
      }
    },
    "StaffGetTransactionResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "transaction": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 5
                },
                "ref": {
                  "type": "string",
                  "example": "1725470171097-1725470220000-5-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "amount": {
                  "type": "string",
                  "example": "1000.00"
                },
                "type": {
                  "type": "string",
                  "example": "debit"
                },
                "status": {
                  "type": "string",
                  "example": "completed"
                },
                "metadata": {
                  "type": "string",
                  "example": "{}"
                },
                "livemode": {
                  "type": "boolean",
                  "example": true
                },
                "desc": {
                  "type": "string",
                  "example": "Payment for options contract."
                },
                "payment_methods": {},
                "created_at": {
                  "type": "string",
                  "example": "2024-09-04T17:02:25.766Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-09-04T17:16:13.541Z"
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "wallet_id": {
                  "type": "number",
                  "example": 1
                },
                "transaction_user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "Femi"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Fatokun"
                    },
                    "email": {
                      "type": "string",
                      "example": "fatokunfemi03@gmail.com"
                    },
                    "is_disabled": {
                      "type": "boolean",
                      "example": false
                    },
                    "pfp_url": {}
                  }
                },
                "transaction_wallet": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "balance": {
                      "type": "string",
                      "example": "98800.00"
                    },
                    "bonus": {
                      "type": "string",
                      "example": "0.00"
                    },
                    "livemode": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-08-28T10:54:43.814Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-09-06T14:33:42.471Z"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    }
                  }
                },
                "order": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 4
                    },
                    "symbol": {
                      "type": "string",
                      "example": "A"
                    },
                    "start_time": {
                      "type": "string",
                      "example": "2024-09-04T17:02:24.508Z"
                    },
                    "expiry_time": {
                      "type": "string",
                      "example": "2024-09-04T17:10:00.000Z"
                    },
                    "amount": {
                      "type": "string",
                      "example": "1000.00"
                    },
                    "prediction": {
                      "type": "string",
                      "example": "higher"
                    },
                    "prediction_correct": {},
                    "status": {
                      "type": "string",
                      "example": "waiting"
                    },
                    "initial_value": {
                      "type": "string",
                      "example": "39927053162.16"
                    },
                    "completed_value": {},
                    "livemode": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-09-04T17:02:25.777Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-09-04T17:02:25.777Z"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "transaction_id": {
                      "type": "number",
                      "example": 5
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "StaffListTransactionsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 4
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "ref": {
                    "type": "string",
                    "example": "1725468396069-1725468420000-1-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "amount": {
                    "type": "string",
                    "example": "1000.00"
                  },
                  "type": {
                    "type": "string",
                    "example": "debit"
                  },
                  "status": {
                    "type": "string",
                    "example": "completed"
                  },
                  "metadata": {
                    "type": "string",
                    "example": "{}"
                  },
                  "livemode": {
                    "type": "boolean",
                    "example": true
                  },
                  "desc": {
                    "type": "string",
                    "example": "Payment for options contract."
                  },
                  "payment_methods": {},
                  "created_at": {
                    "type": "string",
                    "example": "2024-09-04T16:46:37.219Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-09-04T16:46:37.239Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "wallet_id": {}
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "StaffLoginResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "tokens": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "string",
                  "example": "string"
                },
                "refresh": {
                  "type": "string",
                  "example": "token"
                }
              }
            },
            "id": {
              "type": "string",
              "example": "number"
            }
          }
        }
      }
    },
    "StaffGetTradeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "body": {
          "type": "object",
          "properties": {
            "trade": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 5
                },
                "symbol": {
                  "type": "string",
                  "example": "A"
                },
                "start_time": {
                  "type": "string",
                  "example": "2024-09-04T17:16:11.097Z"
                },
                "expiry_time": {
                  "type": "string",
                  "example": "2024-09-04T17:17:00.000Z"
                },
                "amount": {
                  "type": "string",
                  "example": "1000.00"
                },
                "prediction": {
                  "type": "string",
                  "example": "higher"
                },
                "prediction_correct": {},
                "status": {
                  "type": "string",
                  "example": "waiting"
                },
                "initial_value": {
                  "type": "string",
                  "example": "39315045222.93"
                },
                "completed_value": {},
                "livemode": {
                  "type": "boolean",
                  "example": true
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-09-04T17:16:13.538Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-09-04T17:16:13.538Z"
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "transaction_id": {
                  "type": "number",
                  "example": 6
                },
                "transaction": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 6
                    },
                    "ref": {
                      "type": "string",
                      "example": "1725470300803-1725470340000-6-5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "amount": {
                      "type": "string",
                      "example": "1000.00"
                    },
                    "type": {
                      "type": "string",
                      "example": "debit"
                    },
                    "status": {
                      "type": "string",
                      "example": "completed"
                    },
                    "metadata": {
                      "type": "string",
                      "example": "{}"
                    },
                    "livemode": {
                      "type": "boolean",
                      "example": false
                    },
                    "desc": {
                      "type": "string",
                      "example": "Payment for options contract."
                    },
                    "payment_methods": {},
                    "created_at": {
                      "type": "string",
                      "example": "2024-09-04T17:16:13.527Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-09-04T17:18:23.210Z"
                    },
                    "user_id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "wallet_id": {
                      "type": "number",
                      "example": 1
                    }
                  }
                },
                "order_user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "Femi"
                    },
                    "email": {
                      "type": "string",
                      "example": "fatokunfemi03@gmail.com"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-08-12T14:31:20.545Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-09-29T09:31:58.688Z"
                    },
                    "is_disabled": {
                      "type": "boolean",
                      "example": false
                    },
                    "pfp_url": {
                      "type": "string",
                      "example": "https://oliveoption.blob.core.windows.net/default/profile_pics/profile_pic_1723724632731_331371914.png"
                    }
                  }
                }
              }
            }
          }
        },
        "status": {
          "type": "number",
          "example": 200
        }
      }
    },
    "ListFaqsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "faqs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "question": {
                    "type": "string",
                    "example": "Hello world"
                  },
                  "answer": {
                    "type": "string",
                    "example": "Hi world"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-13T09:26:10.646Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-13T09:26:10.646Z"
                  },
                  "category_id": {
                    "type": "number",
                    "example": 2
                  },
                  "category": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 2
                      },
                      "name": {
                        "type": "string",
                        "example": "Test Category"
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2024-10-13T09:13:02.131Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "example": "2024-10-13T09:13:02.131Z"
                      },
                      "deleted_at": {}
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateFaqPayload": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "example": "Hello world"
        },
        "answer": {
          "type": "string",
          "example": "Hi world"
        },
        "category": {
          "type": "number",
          "example": 2
        }
      }
    },
    "GetFaqResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "faq": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "question": {
                  "type": "string",
                  "example": "Hello world"
                },
                "answer": {
                  "type": "string",
                  "example": "Hi world"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-13T09:26:10.646Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-13T09:26:10.646Z"
                },
                "category_id": {
                  "type": "number",
                  "example": 2
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 2
                    },
                    "name": {
                      "type": "string",
                      "example": "Test Category"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2024-10-13T09:13:02.131Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2024-10-13T09:13:02.131Z"
                    },
                    "deleted_at": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "CreateFaqCategoryPayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "GetFaqCategoryResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "name": {
                  "type": "string",
                  "example": "Test Category"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-13T09:13:02.131Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-13T09:13:02.131Z"
                },
                "deleted_at": {}
              }
            }
          }
        }
      }
    },
    "ListFaqCategoriesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "categories": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "name": {
                    "type": "string",
                    "example": "Test Category"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-13T09:13:02.131Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-13T09:13:02.131Z"
                  },
                  "deleted_at": {}
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "GetContentResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "content": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "user_category": {
                  "type": "string",
                  "example": "traders"
                },
                "category": {
                  "type": "string",
                  "example": "Privacy Policy"
                },
                "content": {
                  "type": "string",
                  "example": "Hello world, we are just testing"
                },
                "document_url": {},
                "created_at": {
                  "type": "string",
                  "example": "2024-10-13T08:58:06.559Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-13T08:58:06.559Z"
                }
              }
            }
          }
        }
      }
    },
    "GetPromotionSectionResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "section": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Section 1"
                },
                "type": {
                  "type": "string",
                  "example": "Banner"
                },
                "thumbnail_url": {
                  "type": "string",
                  "example": "https://oliveoption.blob.core.windows.net/default/promotional_materials_section_thumbnails/thumbnail_1729326279133_635282416.png"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-19T08:25:24.602Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-19T08:25:24.602Z"
                }
              }
            }
          }
        }
      }
    },
    "ListPromotionSectionsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "sections": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "type": {
                    "type": "string",
                    "example": "Banner"
                  },
                  "name": {
                    "type": "string",
                    "example": "Section 2"
                  },
                  "thumbnail_url": {
                    "type": "string",
                    "example": "https://oliveoption.blob.core.windows.net/default/promotional_materials_section_thumbnails/thumbnail_1729326515564_496316983.png"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-19T08:25:24.602Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-19T08:28:36.454Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "GetMaterialResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "material": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "Video"
                },
                "language": {
                  "type": "string",
                  "example": "EN"
                },
                "size": {
                  "type": "string",
                  "example": "128x128"
                },
                "section_id": {
                  "type": "number",
                  "example": 1
                },
                "media_url": {
                  "type": "string",
                  "example": "https://oliveoption.blob.core.windows.net/default/promotional_materials_media/media_1729327351499_458220077.png"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-19T08:42:34.452Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-19T08:42:34.452Z"
                }
              }
            }
          }
        }
      }
    },
    "ListMaterialsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "materials": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "language": {
                    "type": "string",
                    "example": "EN"
                  },
                  "size": {
                    "type": "string",
                    "example": "128x200"
                  },
                  "media_url": {
                    "type": "string",
                    "example": "https://oliveoption.blob.core.windows.net/default/promotional_materials_media/media_1729327489818_785837476.png"
                  },
                  "type": {
                    "type": "string",
                    "example": "Video"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-19T08:42:34.452Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-19T08:44:50.244Z"
                  },
                  "section_id": {
                    "type": "number",
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateAffiliateResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "string",
              "example": "uuid-5678"
            },
            "mainLink": {
              "type": "string",
              "example": "https://affiliate-link.com"
            },
            "earnings": {
              "type": "number",
              "example": 0
            },
            "totalDeposits": {
              "type": "number",
              "example": 0
            },
            "nextPaymentDate": {
              "type": "string",
              "example": "2024-11-01T00:00:00.000Z"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-16T12:30:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-16T12:30:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "GetAffiliateByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "string",
              "example": "uuid-5678"
            },
            "mainLink": {
              "type": "string",
              "example": "https://affiliate-link.com"
            },
            "earnings": {
              "type": "number",
              "example": 150.75
            },
            "totalDeposits": {
              "type": "number",
              "example": 500
            },
            "nextPaymentDate": {
              "type": "string",
              "example": "2024-11-01T00:00:00.000Z"
            },
            "created_at": {
              "type": "string",
              "example": "2024-01-15T09:45:30.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-16T12:30:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "GetPaginatedAffiliatesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 3
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "uuid-2234"
                  },
                  "userId": {
                    "type": "string",
                    "example": "uuid-5679"
                  },
                  "mainLink": {
                    "type": "string",
                    "example": "https://affiliate2-link.com"
                  },
                  "earnings": {
                    "type": "number",
                    "example": 200.5
                  },
                  "totalDeposits": {
                    "type": "number",
                    "example": 700
                  },
                  "nextPaymentDate": {
                    "type": "string",
                    "example": "2024-11-05T00:00:00.000Z"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-02-12T09:45:30.000Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-16T12:40:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "UpdateAffiliateResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "string",
              "example": "uuid-5678"
            },
            "mainLink": {
              "type": "string",
              "example": "https://updated-affiliate-link.com"
            },
            "earnings": {
              "type": "number",
              "example": 180
            },
            "totalDeposits": {
              "type": "number",
              "example": 550
            },
            "nextPaymentDate": {
              "type": "string",
              "example": "2024-11-15T00:00:00.000Z"
            },
            "created_at": {
              "type": "string",
              "example": "2024-01-15T09:45:30.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-16T13:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "DeleteAffiliateResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "CreateAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-5678"
            },
            "full_name": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john.doe@example.com"
            },
            "referral_code": {
              "type": "string",
              "example": "NBPHbD"
            },
            "is_active": {
              "type": "boolean",
              "example": true
            },
            "is_verified": {
              "type": "boolean",
              "example": false
            },
            "password": {
              "type": "string",
              "example": "hashed_password"
            },
            "verification_code": {
              "type": "string",
              "example": "6789"
            },
            "verification_type": {
              "type": "string",
              "example": "email_verification"
            },
            "last_login": {},
            "tier_level": {
              "type": "number",
              "example": 1
            },
            "total_referrals": {
              "type": "number",
              "example": 0
            },
            "country": {
              "type": "string",
              "example": "United States"
            },
            "date_of_birth": {
              "type": "string",
              "example": "1990-05-15"
            },
            "phone_number": {
              "type": "string",
              "example": "555-1234"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-16T12:45:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-16T12:45:00.000Z"
            }
          }
        }
      }
    },
    "GetAffiliateUserByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-5678"
            },
            "full_name": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "john.doe@example.com"
            },
            "referral_code": {
              "type": "string",
              "example": "NBPHbD"
            },
            "is_active": {
              "type": "boolean",
              "example": true
            },
            "is_verified": {
              "type": "boolean",
              "example": false
            },
            "password": {
              "type": "string",
              "example": "hashed_password"
            },
            "verification_code": {
              "type": "string",
              "example": "6789"
            },
            "verification_type": {
              "type": "string",
              "example": "email_verification"
            },
            "last_login": {},
            "tier_level": {
              "type": "number",
              "example": 1
            },
            "total_referrals": {
              "type": "number",
              "example": 0
            },
            "country": {
              "type": "string",
              "example": "United States"
            },
            "date_of_birth": {
              "type": "string",
              "example": "1990-05-15"
            },
            "phone_number": {
              "type": "string",
              "example": "555-1234"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-16T12:45:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-16T12:45:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "GetPaginatedAffiliateUsersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 3
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 4
                  },
                  "full_name": {
                    "type": "string",
                    "example": "Bob Johnson"
                  },
                  "email": {
                    "type": "string",
                    "example": "bob@example.com"
                  },
                  "referral_code": {
                    "type": "string",
                    "example": "REF456"
                  },
                  "is_active": {
                    "type": "boolean",
                    "example": false
                  },
                  "is_verified": {
                    "type": "boolean",
                    "example": false
                  },
                  "password": {
                    "type": "string",
                    "example": "hash_password"
                  },
                  "verification_code": {
                    "type": "string",
                    "example": "5678"
                  },
                  "verification_type": {},
                  "last_login": {},
                  "tier_level": {
                    "type": "number",
                    "example": 1
                  },
                  "total_referrals": {
                    "type": "number",
                    "example": 2
                  },
                  "country": {
                    "type": "string",
                    "example": "Canada"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "example": "1992-11-30"
                  },
                  "phone_number": {
                    "type": "string",
                    "example": "555-5678"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-20T01:38:45.901Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-20T01:38:45.901Z"
                  },
                  "deleted_at": {}
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "GetPaginatedUserReferralsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "referrals": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 5
                  },
                  "full_name": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "verification_status": {
                    "type": "boolean",
                    "example": false
                  },
                  "userType": {
                    "type": "string",
                    "example": "Trader"
                  },
                  "registration_date": {
                    "type": "string",
                    "example": "2024-10-20T01:38:45.901Z"
                  },
                  "referred_count": {
                    "type": "number",
                    "example": 2
                  }
                }
              }
            },
            "total_count": {
              "type": "number",
              "example": 12
            },
            "total_pages": {
              "type": "number",
              "example": 2
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "SigninAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 4
                },
                "full_name": {
                  "type": "string",
                  "example": "Bob Johnson"
                },
                "email": {
                  "type": "string",
                  "example": "bob@example.com"
                },
                "referral_code": {
                  "type": "string",
                  "example": "REF456"
                },
                "is_active": {
                  "type": "boolean",
                  "example": false
                },
                "is_verified": {
                  "type": "boolean",
                  "example": false
                },
                "password": {
                  "type": "string",
                  "example": "hash_password"
                },
                "verification_code": {
                  "type": "string",
                  "example": "5678"
                },
                "verification_type": {},
                "last_login": {},
                "tier_level": {
                  "type": "number",
                  "example": 1
                },
                "total_referrals": {
                  "type": "number",
                  "example": 2
                },
                "country": {
                  "type": "string",
                  "example": "Canada"
                },
                "date_of_birth": {
                  "type": "string",
                  "example": "1992-11-30"
                },
                "phone_number": {
                  "type": "string",
                  "example": "555-5678"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-20T01:38:45.901Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-20T01:38:45.901Z"
                },
                "deleted_at": {}
              }
            },
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "LogoutAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "User has successfully logged out."
        },
        "body": {}
      }
    },
    "VerifyOtpAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "OTP has successfully verified."
        },
        "body": {}
      }
    },
    "VerifyEmailAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Email has successfully verified."
        },
        "body": {}
      }
    },
    "ResendVerificationCodeAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Verification code has been resent successfully."
        },
        "body": {}
      }
    },
    "SendPasswordChangeOtpAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Password change OTP has been sent successfully."
        },
        "body": {}
      }
    },
    "ChangePasswordAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Password has been successfully changed."
        },
        "body": {}
      }
    },
    "RefreshTokenAffiliateUserResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Refresh token has been successfully refreshed."
        },
        "body": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "CreatePromoCodeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "code": {
              "type": "string",
              "example": "PROMO12"
            },
            "expiryDate": {
              "type": "string",
              "example": "2024-12-31T23:59:59.999Z"
            },
            "usageLimit": {
              "type": "number",
              "example": 100
            },
            "usedCount": {
              "type": "number",
              "example": 0
            },
            "discountAmount": {
              "type": "number",
              "example": 20
            },
            "is_active": {
              "type": "boolean",
              "example": true
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "UpdatePromoCodeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "code": {
              "type": "string",
              "example": "PROMO12"
            },
            "expiryDate": {
              "type": "string",
              "example": "2024-12-31T23:59:59.999Z"
            },
            "usageLimit": {
              "type": "number",
              "example": 150
            },
            "usedCount": {
              "type": "number",
              "example": 10
            },
            "discountAmount": {
              "type": "number",
              "example": 25
            },
            "is_active": {
              "type": "boolean",
              "example": false
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:30:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetPromoCodeByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "code": {
              "type": "string",
              "example": "PROMO12"
            },
            "expiryDate": {
              "type": "string",
              "example": "2024-12-31T23:59:59.999Z"
            },
            "usageLimit": {
              "type": "number",
              "example": 100
            },
            "usedCount": {
              "type": "number",
              "example": 10
            },
            "discountAmount": {
              "type": "number",
              "example": 20
            },
            "is_active": {
              "type": "boolean",
              "example": true
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:30:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAllPromoCodesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-5678"
              },
              "code": {
                "type": "string",
                "example": "PROMO45"
              },
              "expiryDate": {
                "type": "string",
                "example": "2025-01-01T23:59:59.999Z"
              },
              "usageLimit": {
                "type": "number",
                "example": 50
              },
              "usedCount": {
                "type": "number",
                "example": 5
              },
              "discountAmount": {
                "type": "number",
                "example": 15
              },
              "is_active": {
                "type": "boolean",
                "example": false
              },
              "created_at": {
                "type": "string",
                "example": "2024-10-20T12:00:00.000Z"
              },
              "updated_at": {
                "type": "string",
                "example": "2024-10-21T12:30:00.000Z"
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "DeletePromoCodeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 204
        },
        "body": {},
        "message": {
          "type": "string",
          "example": "Promo code deleted successfully."
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "ValidatePromoCodeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Promo code is valid."
        },
        "body": {
          "type": "object",
          "properties": {
            "promoCode": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "uuid-1234"
                },
                "code": {
                  "type": "string",
                  "example": "PROMO12"
                },
                "expiryDate": {
                  "type": "string",
                  "example": "2024-12-31T23:59:59.999Z"
                },
                "usageLimit": {
                  "type": "number",
                  "example": 100
                },
                "usedCount": {
                  "type": "number",
                  "example": 10
                },
                "discountAmount": {
                  "type": "number",
                  "example": 20
                },
                "is_active": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "CreateAffiliateLinkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkTypeId": {
              "type": "number",
              "example": 1
            },
            "affiliateProgramId": {
              "type": "number",
              "example": 2
            },
            "link": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=456&comment=Special%20referral%20offer&linkId=456"
            },
            "promoCode": {
              "type": "string",
              "example": "PROMO12"
            },
            "comment": {
              "type": "string",
              "example": "This is a test comment."
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "UpdateAffiliateLinkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkTypeId": {
              "type": "number",
              "example": 1
            },
            "affiliateProgramId": {
              "type": "number",
              "example": 2
            },
            "link": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
            },
            "promoCode": {
              "type": "string",
              "example": "PROMO12"
            },
            "comment": {
              "type": "string",
              "example": "This is an updated comment."
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-12-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAffiliateLinkByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkTypeId": {
              "type": "number",
              "example": 1
            },
            "affiliateProgramId": {
              "type": "number",
              "example": 2
            },
            "link": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
            },
            "promoCode": {
              "type": "string",
              "example": "PROMO12"
            },
            "comment": {
              "type": "string",
              "example": "This is a test comment."
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAllAffiliateLinksResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-5678"
              },
              "userId": {
                "type": "number",
                "example": 124
              },
              "linkTypeId": {
                "type": "number",
                "example": 1
              },
              "affiliateProgramId": {
                "type": "number",
                "example": 2
              },
              "link": {
                "type": "string",
                "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
              },
              "promoCode": {},
              "comment": {},
              "created_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              },
              "updated_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetPaginatedAffiliateLinksResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 10
            },
            "totalCount": {
              "type": "number",
              "example": 2
            },
            "totalPages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "uuid-5678"
                  },
                  "userId": {
                    "type": "number",
                    "example": 124
                  },
                  "linkTypeId": {
                    "type": "number",
                    "example": 1
                  },
                  "affiliateProgramId": {
                    "type": "number",
                    "example": 2
                  },
                  "link": {
                    "type": "string",
                    "example": "https://affiliate.example.com/link2"
                  },
                  "promoCode": {},
                  "comment": {},
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-22T12:30:00.000Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-22T12:30:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "CreateAffiliateLinkTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "message": {
          "type": "string",
          "example": "Affiliate link type created successfully."
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Referral link type"
            },
            "url": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "UpdateAffiliateLinkTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Affiliate link type updated successfully."
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Updated referral Link"
            },
            "url": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAffiliateLinkTypeByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Referral link type"
            },
            "url": {
              "type": "string",
              "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAllAffiliateLinkTypesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-5678"
              },
              "name": {
                "type": "string",
                "example": "Referral link type 2"
              },
              "url": {
                "type": "string",
                "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
              },
              "created_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              },
              "updated_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "ValidateAffiliateLinkTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "linkType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "uuid-1234"
                },
                "name": {
                  "type": "string",
                  "example": "Referral link type"
                },
                "url": {
                  "type": "string",
                  "example": "https://example.com/?referralCode=ABC123&promoCode=PROMO2023&id=affiliateId456&comment=Special%20referral%20offer&linkId=affiliateId456"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-22T12:00:00.000Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-22T12:00:00.000Z"
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "CreateAffiliateProgramTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 201
        },
        "message": {
          "type": "string",
          "example": "Affiliate program type created successfully."
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Affiliate program type"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "UpdateAffiliateProgramTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Affiliate program type updated successfully."
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Updated affiliate program type"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAffiliateProgramTypeByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "uuid-1234"
            },
            "name": {
              "type": "string",
              "example": "Affiliate program type"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T12:00:00.000Z"
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "GetAllAffiliateProgramTypesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "uuid-5678"
              },
              "name": {
                "type": "string",
                "example": "Affiliate program type 2"
              },
              "created_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              },
              "updated_at": {
                "type": "string",
                "example": "2024-10-22T12:30:00.000Z"
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "ValidateAffiliateProgramTypeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "affiliateProgram": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "uuid-1234"
                },
                "name": {
                  "type": "string",
                  "example": "Affiliate program type"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-22T12:00:00.000Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-22T12:00:00.000Z"
                }
              }
            }
          }
        },
        "tokens": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            }
          }
        }
      }
    },
    "CreateAffiliatePayload": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "uuid-5678"
        },
        "mainLink": {
          "type": "string",
          "example": "https://affiliate-link.com"
        },
        "earnings": {
          "type": "number",
          "example": 0
        },
        "totalDeposits": {
          "type": "number",
          "example": 0
        },
        "nextPaymentDate": {
          "type": "string",
          "example": "2024-11-01T00:00:00.000Z"
        }
      }
    },
    "GetAffiliateByIdPayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "uuid-1234"
        }
      }
    },
    "GetPaginatedAffiliatesPayload": {
      "type": "object",
      "properties": {
        "page": {
          "type": "number",
          "example": 1
        },
        "size": {
          "type": "number",
          "example": 20
        }
      }
    },
    "UpdateAffiliatePayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "uuid-1234"
        },
        "userId": {
          "type": "string",
          "example": "uuid-5678"
        },
        "mainLink": {
          "type": "string",
          "example": "https://updated-affiliate-link.com"
        },
        "earnings": {
          "type": "number",
          "example": 180
        },
        "totalDeposits": {
          "type": "number",
          "example": 550
        },
        "nextPaymentDate": {
          "type": "string",
          "example": "2024-11-15T00:00:00.000Z"
        }
      }
    },
    "DeleteAffiliatePayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "uuid-1234"
        }
      }
    },
    "CreateAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "referral_code": {
          "type": "string",
          "example": "REF123"
        },
        "password": {
          "type": "string",
          "example": "hashed_password"
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "date_of_birth": {
          "type": "string",
          "example": "1990-05-15"
        },
        "phone_number": {
          "type": "string",
          "example": "555-1234"
        }
      }
    },
    "SigninAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "password": {
          "type": "string",
          "example": "plain_text_password"
        }
      }
    },
    "LogoutAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "example": "uuid-1234"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        }
      }
    },
    "VerifyOtpAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "verificationCode": {
          "type": "string",
          "example": "1234"
        }
      }
    },
    "VerifyEmailAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "verificationCode": {
          "type": "string",
          "example": "1234"
        }
      }
    },
    "ResendVerificationCodeAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        }
      }
    },
    "SendPasswordChangeOtpAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        }
      }
    },
    "ChangePasswordAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "otp": {
          "type": "string",
          "example": "1234"
        },
        "newPassword": {
          "type": "string",
          "example": "new_password"
        },
        "confirmPassword": {
          "type": "string",
          "example": "new_password"
        }
      }
    },
    "ChangePasswordPayload": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "example": "string"
        },
        "new_password": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "UpdateStaffPayload": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "string"
        },
        "last_name": {
          "type": "string",
          "example": "string"
        },
        "email": {
          "type": "string",
          "example": "string"
        },
        "language": {
          "type": "string",
          "example": "string"
        },
        "enable_email_notifications": {
          "type": "string",
          "example": "boolean"
        },
        "enable_inapp_notifications": {
          "type": "string",
          "example": "boolean"
        },
        "two_factor_for_signin": {
          "type": "string",
          "example": "boolean"
        },
        "two_factor_for_activities": {
          "type": "string",
          "example": "boolean"
        }
      }
    },
    "RefreshTokenAffiliateUserPayload": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
        },
        "refreshToken": {
          "type": "string",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
        }
      }
    },
    "CreatePromoCodePayload": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "PRO"
        },
        "expiryDate": {
          "type": "string",
          "example": "2024-12-31T23:59:59.999Z"
        },
        "usageLimit": {
          "type": "number",
          "example": 100
        },
        "discountAmount": {
          "type": "number",
          "example": 20
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UpdatePromoCodePayload": {
      "type": "object",
      "properties": {
        "expiryDate": {
          "type": "string",
          "example": "2024-12-31T23:59:59.999Z"
        },
        "usageLimit": {
          "type": "number",
          "example": 150
        },
        "discountAmount": {
          "type": "number",
          "example": 25
        },
        "is_active": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "ValidatePromoCodePayload": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "PROMO12"
        }
      }
    },
    "CreateAffiliateLinkPayload": {
      "type": "object",
      "properties": {
        "linkTypeId": {
          "type": "number",
          "example": 1
        },
        "affiliateProgramId": {
          "type": "number",
          "example": 2
        },
        "link": {
          "type": "string",
          "example": "https://affiliate.example.com/link"
        },
        "promoCode": {
          "type": "string",
          "example": "PROMO12"
        },
        "comment": {
          "type": "string",
          "example": "This is a test comment."
        }
      }
    },
    "UpdateAffiliateLinkPayload": {
      "type": "object",
      "properties": {
        "linkTypeId": {
          "type": "number",
          "example": 1
        },
        "affiliateProgramId": {
          "type": "number",
          "example": 2
        },
        "link": {
          "type": "string",
          "example": "https://affiliate.example.com/new-link"
        },
        "promoCode": {
          "type": "string",
          "example": "NEWPROM"
        },
        "comment": {
          "type": "string",
          "example": "Updated comment for the affiliate link."
        }
      }
    },
    "CreateAffiliateLinkTypePayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Affiliate Link"
        }
      }
    },
    "CreateAffiliateProgramTypePayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Affiliate Program Name"
        }
      }
    },
    "GlobalSettingsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "settings": {
              "type": "object",
              "properties": {
                "system_currency": {
                  "type": "string",
                  "example": "USD"
                }
              }
            }
          }
        }
      }
    },
    "CreateSettingsPayload": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "string"
        },
        "value": {
          "type": "string",
          "example": "any"
        }
      }
    },
    "BlockIpPayload": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "ListBlockedIps": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "ips": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "ip": {
                    "type": "string",
                    "example": "192.168.0.1"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-21T06:49:35.801Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-21T06:49:35.801Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateTradePairPayload": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "example": "string"
        },
        "base_asset": {
          "type": "string",
          "example": "string"
        },
        "quote_asset": {
          "type": "string",
          "example": "string"
        },
        "is_active": {
          "type": "string",
          "example": "boolean"
        }
      }
    },
    "GetTradePairResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "pair": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "name": {
                  "type": "string",
                  "example": "AAPL/USD"
                },
                "category": {
                  "type": "string",
                  "example": "stock"
                },
                "base_asset": {
                  "type": "string",
                  "example": "AAPL"
                },
                "quote_asset": {
                  "type": "string",
                  "example": "USD"
                },
                "is_active": {
                  "type": "boolean",
                  "example": true
                },
                "profit_percent": {
                  "type": "number",
                  "example": 90
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-31T06:48:26.118Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-31T06:48:26.118Z"
                }
              }
            }
          }
        }
      }
    },
    "ListTradePairsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "pairs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "name": {
                    "type": "string",
                    "example": "AAPL/USD"
                  },
                  "category": {
                    "type": "string",
                    "example": "stock"
                  },
                  "base_asset": {
                    "type": "string",
                    "example": "AAPL"
                  },
                  "quote_asset": {
                    "type": "string",
                    "example": "USD"
                  },
                  "is_active": {
                    "type": "boolean",
                    "example": true
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-31T06:48:26.118Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-31T06:48:26.118Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateAlertPayload": {
      "type": "object",
      "properties": {
        "ticker": {
          "type": "string",
          "example": "string"
        },
        "amount": {
          "type": "string",
          "example": "number"
        }
      }
    },
    "GetAlertResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "alert": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 2
                },
                "ticker": {
                  "type": "string",
                  "example": "AAPL"
                },
                "amount": {
                  "type": "string",
                  "example": "56000.00000000"
                },
                "user_id": {
                  "type": "string",
                  "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-31T07:16:27.786Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-31T07:16:27.786Z"
                }
              }
            }
          }
        }
      }
    },
    "ListAlertsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "size": {
              "type": "number",
              "example": 20
            },
            "page": {
              "type": "number",
              "example": 1
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "alerts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "ticker": {
                    "type": "string",
                    "example": "AAPL"
                  },
                  "amount": {
                    "type": "string",
                    "example": "56000.00000000"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-31T07:16:27.786Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-31T07:16:27.786Z"
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  }
                }
              }
            }
          }
        }
      }
    },
    "GetTickerResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "tickers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ticker": {
                    "type": "string",
                    "example": "X:00USD"
                  },
                  "name": {
                    "type": "string",
                    "example": "00 Token - United States dollar"
                  },
                  "market": {
                    "type": "string",
                    "example": "crypto"
                  },
                  "locale": {
                    "type": "string",
                    "example": "global"
                  },
                  "active": {
                    "type": "boolean",
                    "example": true
                  },
                  "currency_symbol": {
                    "type": "string",
                    "example": "USD"
                  },
                  "currency_name": {
                    "type": "string",
                    "example": "United States dollar"
                  },
                  "base_currency_symbol": {
                    "type": "string",
                    "example": "00"
                  },
                  "base_currency_name": {
                    "type": "string",
                    "example": "00 Token"
                  },
                  "last_updated_utc": {
                    "type": "string",
                    "example": "2017-01-01T00:00:00Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "GetLeadersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "leadersboard": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "first_name": {
                    "type": "string",
                    "example": "Femi"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Fatokun"
                  },
                  "pfp_url": {
                    "type": "string",
                    "example": "https://oliveoption.blob.core.windows.net/default/profile_pics/profile_pic_1723724632731_331371914.png"
                  },
                  "profit": {
                    "type": "string",
                    "example": "2000.00"
                  }
                }
              }
            }
          }
        }
      }
    },
    "CreateProfitOutcomePayload": {
      "type": "object",
      "properties": {
        "ticker": {
          "type": "string",
          "example": "string"
        },
        "profit_outcome": {
          "type": "string",
          "example": "number"
        }
      }
    },
    "CreateProfitOutcomeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "outcome": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "ticker": {
                  "type": "string",
                  "example": "NVDA"
                },
                "profit_outcome": {
                  "type": "string",
                  "example": "50"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-21T06:53:33.023Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-21T06:53:33.023Z"
                }
              }
            }
          }
        }
      }
    },
    "ListCustomProfitOutcomeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "outcomes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "ticker": {
                    "type": "string",
                    "example": "NVDA"
                  },
                  "profit_outcome": {
                    "type": "string",
                    "example": "50"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-21T06:53:33.023Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-21T06:53:33.023Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateComissionPayload": {
      "type": "object",
      "properties": {
        "ticker": {
          "type": "string",
          "example": "string"
        },
        "sell_commission": {
          "type": "string",
          "example": "string"
        },
        "buy_commission": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "GetComissionResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "comission": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "ticker": {
                  "type": "string",
                  "example": "NVDA"
                },
                "sell_commission": {
                  "type": "string",
                  "example": "50"
                },
                "buy_commission": {
                  "type": "string",
                  "example": "50"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2024-10-21T07:13:29.226Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2024-10-21T07:13:29.226Z"
                }
              }
            }
          }
        }
      }
    },
    "ListComissionsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "total_count": {
              "type": "number",
              "example": 1
            },
            "total_pages": {
              "type": "number",
              "example": 1
            },
            "comissions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "ticker": {
                    "type": "string",
                    "example": "NVDA"
                  },
                  "buy_commission": {
                    "type": "string",
                    "example": "50"
                  },
                  "sell_commission": {
                    "type": "string",
                    "example": "50"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        }
      }
    },
    "CreateAffiliateClickPayload": {
      "type": "object",
      "properties": {
        "clickedAt": {
          "type": "string",
          "example": "2024-10-27T10:15:00.000Z"
        },
        "linkId": {
          "type": "number",
          "example": 456
        }
      }
    },
    "UpdateAffiliateClickPayload": {
      "type": "object",
      "properties": {
        "linkId": {
          "type": "number",
          "example": 456
        },
        "metadata": {
          "type": "object",
          "properties": {
            "device": {
              "type": "string",
              "example": "mobile"
            },
            "location": {
              "type": "object",
              "properties": {
                "country": {
                  "type": "string",
                  "example": "Canada"
                },
                "region": {
                  "type": "string",
                  "example": "Ontario"
                },
                "city": {
                  "type": "string",
                  "example": "Toronto"
                },
                "ip": {
                  "type": "string",
                  "example": "192.168.1.2"
                }
              }
            },
            "engagement": {
              "type": "object",
              "properties": {
                "userAgent": {
                  "type": "string",
                  "example": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
                }
              }
            }
          }
        }
      }
    },
    "CreateAffiliateClickResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkId": {
              "type": "number",
              "example": 456
            },
            "clickedAt": {
              "type": "string",
              "example": "2024-10-27T10:15:00.000Z"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "example": "desktop"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "country": {
                      "type": "string",
                      "example": "USA"
                    },
                    "region": {
                      "type": "string",
                      "example": "New York"
                    },
                    "city": {
                      "type": "string",
                      "example": "New York City"
                    },
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.10"
                    }
                  }
                },
                "engagement": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "example": "2024-10-27T10:15:00.000Z"
                    },
                    "userAgent": {
                      "type": "string",
                      "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Click data created successfully."
        }
      }
    },
    "GetAffiliateClicksResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 20
            },
            "totalCount": {
              "type": "number",
              "example": 2
            },
            "totalPages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 2
                  },
                  "userId": {
                    "type": "number",
                    "example": 124
                  },
                  "linkId": {
                    "type": "number",
                    "example": 457
                  },
                  "clickedAt": {
                    "type": "string",
                    "example": "2024-10-27T11:00:00.000Z"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "device": {
                        "type": "string",
                        "example": "mobile"
                      },
                      "location": {
                        "type": "object",
                        "properties": {
                          "country": {
                            "type": "string",
                            "example": "Canada"
                          },
                          "region": {
                            "type": "string",
                            "example": "Ontario"
                          },
                          "city": {
                            "type": "string",
                            "example": "Toronto"
                          },
                          "ip": {
                            "type": "string",
                            "example": "192.168.1.2"
                          }
                        }
                      },
                      "engagement": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "2024-10-27T11:00:00.000Z"
                          },
                          "userAgent": {
                            "type": "string",
                            "example": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Click data retrieved successfully."
        }
      }
    },
    "GetAffiliateClickByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkId": {
              "type": "number",
              "example": 456
            },
            "clickedAt": {
              "type": "string",
              "example": "2024-10-27T10:15:00.000Z"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "example": "desktop"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "country": {
                      "type": "string",
                      "example": "USA"
                    },
                    "region": {
                      "type": "string",
                      "example": "California"
                    },
                    "city": {
                      "type": "string",
                      "example": "San Francisco"
                    },
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.1"
                    }
                  }
                },
                "engagement": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "example": "2024-10-27T10:15:00.000Z"
                    },
                    "userAgent": {
                      "type": "string",
                      "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Click data retrieved successfully."
        }
      }
    },
    "UpdateAffiliateClickResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "linkId": {
              "type": "number",
              "example": 456
            },
            "clickedAt": {
              "type": "string",
              "example": "2024-10-27T10:15:00.000Z"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "string",
                  "example": "mobile"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "country": {
                      "type": "string",
                      "example": "Canada"
                    },
                    "region": {
                      "type": "string",
                      "example": "Ontario"
                    },
                    "city": {
                      "type": "string",
                      "example": "Toronto"
                    },
                    "ip": {
                      "type": "string",
                      "example": "192.168.1.2"
                    }
                  }
                },
                "engagement": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "example": "2024-10-27T10:15:00.000Z"
                    },
                    "userAgent": {
                      "type": "string",
                      "example": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
                    }
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Click data updated successfully."
        }
      }
    },
    "DeleteAffiliateClickResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 204
        },
        "body": {},
        "message": {
          "type": "string",
          "example": "Click data deleted successfully."
        }
      }
    },
    "CreateActivityPayload": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number",
          "example": 1
        },
        "activityType": {
          "type": "string",
          "example": "SIGN_UP"
        },
        "affiliateUserId": {},
        "performedAt": {
          "type": "string",
          "example": "2024-10-21T07:13:29.226Z"
        }
      }
    },
    "UpdateActivityPayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "userId": {
          "type": "number",
          "example": 1
        },
        "activityType": {
          "type": "string",
          "example": "PASSWORD_CHANGE"
        },
        "affiliateUserId": {},
        "performedAt": {
          "type": "string",
          "example": "2024-10-21T07:13:29.226Z"
        }
      }
    },
    "CreateActivityResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "activityType": {
              "type": "string",
              "example": "SIGN_UP"
            },
            "affiliateUserId": {},
            "performedAt": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "userAgent": {
              "type": "string",
              "example": "Mozilla/5.0"
            },
            "ipAddress": {
              "type": "string",
              "example": "192.168.1.1"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activity created successfully."
        }
      }
    },
    "GetActivityByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "activityType": {
              "type": "string",
              "example": "SIGN_UP"
            },
            "affiliateUserId": {},
            "performedAt": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "userAgent": {
              "type": "string",
              "example": "Mozilla/5.0"
            },
            "ipAddress": {
              "type": "string",
              "example": "192.168.1.1"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activity fetched successfully."
        }
      }
    },
    "GetAllActivitiesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 10
            },
            "totalCount": {
              "type": "number",
              "example": 1
            },
            "totalPages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "userId": {
                    "type": "number",
                    "example": 1
                  },
                  "activityType": {
                    "type": "string",
                    "example": "SIGN_UP"
                  },
                  "affiliateUserId": {},
                  "performedAt": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  },
                  "userAgent": {
                    "type": "string",
                    "example": "Mozilla/5.0"
                  },
                  "ipAddress": {
                    "type": "string",
                    "example": "192.168.1.1"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activities fetched successfully."
        }
      }
    },
    "UpdateActivityResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "activityType": {
              "type": "string",
              "example": "PASSWORD_CHANGE"
            },
            "affiliateUserId": {},
            "performedAt": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "userAgent": {
              "type": "string",
              "example": "Mozilla/5.0"
            },
            "ipAddress": {
              "type": "string",
              "example": "192.168.1.1"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-22T07:13:29.226Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activity updated successfully."
        }
      }
    },
    "DeleteActivityResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {},
        "message": {
          "type": "string",
          "example": "Activity deleted successfully."
        }
      }
    },
    "ValidateReferralCodeResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Referral ID is valid."
        },
        "body": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "CreateAffiliateTelegramLinkPayload": {
      "type": "object",
      "properties": {
        "userType": {
          "type": "string",
          "example": "AffiliateUser"
        }
      }
    },
    "CreateAffiliateTelegramLinkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 201
        },
        "message": {
          "type": "string",
          "example": "Linking process initiated. Provide this link to the user."
        },
        "body": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "number",
              "example": 12345
            },
            "userType": {
              "type": "string",
              "example": "AffiliateUser"
            },
            "state": {
              "type": "string",
              "example": "unique_state"
            },
            "status": {
              "type": "string",
              "example": "pending"
            },
            "url": {
              "type": "string",
              "example": "https://t.me/olive_cherry_bot"
            }
          }
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "UpdateAffiliateTelegramLinkPayload": {
      "type": "object",
      "properties": {
        "telegramChatId": {
          "type": "string",
          "example": "123456789"
        },
        "telegramUsername": {
          "type": "string",
          "example": "affiliate_telegram_updated"
        }
      }
    },
    "GetAllAffiliateTelegramLinksResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "userId": {
                "type": "number",
                "example": 123
              },
              "userType": {
                "type": "string",
                "example": "AffiliateUser"
              },
              "telegramChatId": {
                "type": "string",
                "example": "123456789"
              },
              "telegramUsername": {
                "type": "string",
                "example": "example_username"
              },
              "created_at": {
                "type": "string",
                "example": "2024-10-31T06:48:26.118Z"
              },
              "updated_at": {
                "type": "string",
                "example": "2024-10-31T06:48:26.118Z"
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "GetAffiliateTelegramLinkByIdResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "userType": {
              "type": "string",
              "example": "AffiliateUser"
            },
            "telegramChatId": {
              "type": "string",
              "example": "123456789"
            },
            "telegramUsername": {
              "type": "string",
              "example": "example_username"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-31T06:48:26.118Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-31T06:48:26.118Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "UpdateAffiliateTelegramLinkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 123
            },
            "userType": {
              "type": "string",
              "example": "AffiliateUser"
            },
            "telegramChatId": {
              "type": "string",
              "example": "123456789"
            },
            "telegramUsername": {
              "type": "string",
              "example": "updated_username"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-31T06:48:26.118Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-11-01T07:30:00.000Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Affiliate Telegram link updated successfully."
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "DeleteAffiliateTelegramLinkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 204
        },
        "message": {
          "type": "string",
          "example": "Affiliate Telegram link deleted successfully."
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "AffiliateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "fullName": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "isActive": {
          "type": "boolean",
          "example": true
        },
        "isVerified": {
          "type": "boolean",
          "example": true
        },
        "created_at": {
          "type": "string",
          "example": "2024-10-21T07:13:29.226Z"
        },
        "updated_at": {
          "type": "string",
          "example": "2024-10-21T07:13:29.226Z"
        }
      }
    },
    "UpdateAffiliateUserRequest": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string",
          "example": "John Doe Updated"
        },
        "email": {
          "type": "string",
          "example": "updated.email@example.com"
        }
      }
    },
    "AffiliateActivityResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "activityType": {
              "type": "string",
              "example": "password_change"
            },
            "performedAt": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "userAgent": {
              "type": "string",
              "example": "Mozilla/5.0"
            },
            "ipAddress": {
              "type": "string",
              "example": "192.168.1.1"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activity retrieved successfully."
        }
      }
    },
    "CreateAffiliateActivityRequest": {
      "type": "object",
      "properties": {
        "activityType": {
          "type": "string",
          "example": "sign_up"
        }
      }
    },
    "CreateAffiliateActivityResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "activityType": {
              "type": "string",
              "example": "sign_up"
            },
            "performedAt": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "userAgent": {
              "type": "string",
              "example": "Mozilla/5.0"
            },
            "ipAddress": {
              "type": "string",
              "example": "192.168.1.1"
            },
            "created_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            },
            "updated_at": {
              "type": "string",
              "example": "2024-10-21T07:13:29.226Z"
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activity created successfully."
        }
      }
    },
    "GetAllAffiliateActivitiesResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "page": {
              "type": "number",
              "example": 1
            },
            "size": {
              "type": "number",
              "example": 10
            },
            "totalCount": {
              "type": "number",
              "example": 1
            },
            "totalPages": {
              "type": "number",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 1
                  },
                  "userId": {
                    "type": "number",
                    "example": 1
                  },
                  "activityType": {
                    "type": "string",
                    "example": "sign_up"
                  },
                  "performedAt": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  },
                  "userAgent": {
                    "type": "string",
                    "example": "Mozilla/5.0"
                  },
                  "ipAddress": {
                    "type": "string",
                    "example": "192.168.1.1"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-21T07:13:29.226Z"
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "Activities fetched successfully."
        }
      }
    },
    "GetUserClicksResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "example": "2024-10-03"
              },
              "counts": {
                "type": "number",
                "example": 18
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "User clicks retrieved successfully."
        }
      }
    },
    "GetUserReferralsStatsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "example": "2024-10-03"
              },
              "counts": {
                "type": "number",
                "example": 3
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "User referrals retrieved successfully."
        }
      }
    },
    "GetUserClicksAndReferralsStatsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "clicks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "example": "2024-10-03"
                  },
                  "counts": {
                    "type": "number",
                    "example": 18
                  }
                }
              }
            },
            "referrals": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "example": "2024-10-03"
                  },
                  "counts": {
                    "type": "number",
                    "example": 3
                  }
                }
              }
            }
          }
        },
        "message": {
          "type": "string",
          "example": "User clicks and referrals retrieved successfully."
        }
      }
    },
    "CreatePostbackPayload": {
      "type": "object",
      "properties": {
        "linkId": {
          "type": "number",
          "example": 1
        },
        "event_id": {
          "type": "string",
          "example": "eid12345"
        },
        "status": {
          "type": "string",
          "example": "reg"
        },
        "click_id": {
          "type": "string",
          "example": "cid12345"
        },
        "site_id": {
          "type": "string",
          "example": "sid12345"
        },
        "linkIdValue": {
          "type": "string",
          "example": "lid12345"
        },
        "trader_id": {},
        "payout": {
          "type": "number",
          "example": 100
        },
        "method": {
          "type": "string",
          "example": "POST"
        },
        "url": {
          "type": "string",
          "example": "https://example.com/postback.php"
        },
        "timestamp": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        }
      }
    },
    "CreatePostbackResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "affiliateId": {
          "type": "number",
          "example": 1
        },
        "linkId": {
          "type": "number",
          "example": 1
        },
        "event_id": {
          "type": "string",
          "example": "eid12345"
        },
        "status": {
          "type": "string",
          "example": "reg"
        },
        "click_id": {
          "type": "string",
          "example": "cid12345"
        },
        "site_id": {
          "type": "string",
          "example": "sid12345"
        },
        "linkIdValue": {
          "type": "string",
          "example": "lid12345"
        },
        "trader_id": {},
        "payout": {
          "type": "number",
          "example": 100
        },
        "method": {
          "type": "string",
          "example": "POST"
        },
        "url": {
          "type": "string",
          "example": "https://example.com/postback.php"
        },
        "timestamp": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "created_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "updated_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "deleted_at": {}
      }
    },
    "GetPostbackByIdResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "affiliateId": {
          "type": "number",
          "example": 1
        },
        "linkId": {
          "type": "number",
          "example": 1
        },
        "event_id": {
          "type": "string",
          "example": "eid12345"
        },
        "status": {
          "type": "string",
          "example": "reg"
        },
        "click_id": {
          "type": "string",
          "example": "cid12345"
        },
        "site_id": {
          "type": "string",
          "example": "sid12345"
        },
        "linkIdValue": {
          "type": "string",
          "example": "lid12345"
        },
        "trader_id": {},
        "payout": {
          "type": "number",
          "example": 100
        },
        "method": {
          "type": "string",
          "example": "POST"
        },
        "url": {
          "type": "string",
          "example": "https://example.com/postback.php"
        },
        "timestamp": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "created_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "updated_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "deleted_at": {}
      }
    },
    "UpdatePostbackPayload": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "conf"
        },
        "click_id": {
          "type": "string",
          "example": "cid12345-updated"
        },
        "site_id": {
          "type": "string",
          "example": "sid12345-updated"
        },
        "linkIdValue": {
          "type": "string",
          "example": "lid12345-updated"
        },
        "trader_id": {
          "type": "string",
          "example": "uid12345-updated"
        },
        "payout": {
          "type": "number",
          "example": 200
        },
        "method": {
          "type": "string",
          "example": "POST"
        },
        "url": {
          "type": "string",
          "example": "https://example.com/postback.php?status={status}&eid={eventId}&cid={click_id}&sid={site_id}&lid={linkId}&uid={trader_id}&payout={sumdep}"
        },
        "timestamp": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        }
      }
    },
    "UpdatePostbackResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "affiliateId": {
          "type": "number",
          "example": 1
        },
        "linkId": {
          "type": "number",
          "example": 1
        },
        "eventId": {
          "type": "string",
          "example": "eid12345"
        },
        "status": {
          "type": "string",
          "example": "conf"
        },
        "click_id": {
          "type": "string",
          "example": "cid12345-updated"
        },
        "site_id": {
          "type": "string",
          "example": "sid12345-updated"
        },
        "linkIdValue": {
          "type": "string",
          "example": "lid12345-updated"
        },
        "trader_id": {
          "type": "string",
          "example": "uid12345-updated"
        },
        "payout": {
          "type": "number",
          "example": 200
        },
        "method": {
          "type": "string",
          "example": "POST"
        },
        "url": {
          "type": "string",
          "example": "https://example.com/postback.php?status={status}&eid={eventId}&cid={click_id}&sid={site_id}&lid={linkId}&uid={trader_id}&payout={sumdep}"
        },
        "timestamp": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "created_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "updated_at": {
          "type": "string",
          "example": "2024-11-28T12:00:00.000Z"
        },
        "deleted_at": {}
      }
    },
    "DeletePostbackResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Postback deleted successfully"
        }
      }
    },
    "GetPostbacksByUserIdResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "affiliateId": {
            "type": "number",
            "example": 2
          },
          "linkId": {
            "type": "number",
            "example": 2
          },
          "eventId": {
            "type": "string",
            "example": "eid54321"
          },
          "status": {
            "type": "string",
            "example": "conf"
          },
          "click_id": {
            "type": "string",
            "example": "cid54321"
          },
          "site_id": {
            "type": "string",
            "example": "sid54321"
          },
          "linkIdValue": {
            "type": "string",
            "example": "lid54321"
          },
          "trader_id": {
            "type": "string",
            "example": "uid54321"
          },
          "payout": {
            "type": "number",
            "example": 150
          },
          "method": {
            "type": "string",
            "example": "POST"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/postback.php?status={status}&eid={eventId}&cid={click_id}&sid={site_id}&lid={linkId}&uid={trader_id}&payout={sumdep}"
          },
          "timestamp": {
            "type": "string",
            "example": "2024-11-28T12:00:00.000Z"
          },
          "created_at": {
            "type": "string",
            "example": "2024-11-28T12:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2024-11-28T12:00:00.000Z"
          },
          "deleted_at": {}
        }
      }
    },
    "TopAffiliateUsersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "OK"
        },
        "body": {
          "type": "object",
          "properties": {
            "topAffiliates": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 3
                  },
                  "full_name": {
                    "type": "string",
                    "example": "Mark Johnson"
                  },
                  "email": {
                    "type": "string",
                    "example": "markjohnson@example.com"
                  },
                  "verification_status": {
                    "type": "boolean",
                    "example": true
                  },
                  "total_referrals": {
                    "type": "number",
                    "example": 400
                  },
                  "tier_level": {
                    "type": "number",
                    "example": 2
                  },
                  "registration_date": {
                    "type": "string",
                    "example": "2023-03-25T14:00:00Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "SupportMessageResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Support message received."
        },
        "statusCode": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "acknowledgment": {
              "type": "string",
              "example": "Thank you for reaching out! Our customer support team will get back to you shortly."
            }
          }
        },
        "token": {
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoiYWNjZXNzIiwicmVmX2lkIjoiMjQiLCJzdWIiOiJVU0VSLTQ1IiwiaWF0IjoxNzI1MTQ4ODAwLCJleHAiOjE3Mjc3NDA3OTksImlzcyI6ImdyYW5kZ2FsZS5jb20ifQ.4gGZ4TxEGm5fhP5RdZHZmVZL7q3c"
            },
            "refreshToken": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0eXBlIjoicmVmcmVzaCIsInN1YiI6IlVTRVItNDUiLCJpYXQiOjE3MjUxNDg4MDAsImV4cCI6MTcyNzc0MDc5OSwiaXNzIjoiZ3JhbmRnYWxlLmNvbSJ9.O1QuXz7cCkYJ-EFh7ZlxnDxtIKzDjlU3GfHrq5X9Kt8"
            }
          }
        }
      }
    },
    "SupportMessageRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "message": {
          "type": "string",
          "example": "I need help with my account."
        }
      }
    },
    "PinTickerPayload": {
      "type": "object",
      "properties": {
        "symbol": {
          "type": "string",
          "example": "00-USD"
        },
        "full_data": {
          "type": "object",
          "properties": {
            "ticker": {
              "type": "string",
              "example": "X:00USD"
            },
            "name": {
              "type": "string",
              "example": "00 Token - United States dollar"
            },
            "market": {
              "type": "string",
              "example": "crypto"
            },
            "locale": {
              "type": "string",
              "example": "global"
            },
            "active": {
              "type": "boolean",
              "example": true
            },
            "currency_symbol": {
              "type": "string",
              "example": "USD"
            },
            "currency_name": {
              "type": "string",
              "example": "United States dollar"
            },
            "base_currency_symbol": {
              "type": "string",
              "example": "00"
            },
            "base_currency_name": {
              "type": "string",
              "example": "00 Token"
            },
            "last_updated_utc": {
              "type": "string",
              "example": "2017-01-01T00:00:00Z"
            }
          }
        }
      }
    },
    "ListPinnedTickersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "tickers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 5
                  },
                  "user_id": {
                    "type": "string",
                    "example": "5b4bcc93-6628-47d0-bfba-a9464ce735bd"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-12-19T19:35:32.689Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-12-19T19:35:32.689Z"
                  },
                  "symbol": {
                    "type": "string",
                    "example": "00-USD"
                  },
                  "full_data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "00 Token - United States dollar"
                      },
                      "active": {
                        "type": "boolean",
                        "example": true
                      },
                      "locale": {
                        "type": "string",
                        "example": "global"
                      },
                      "market": {
                        "type": "string",
                        "example": "crypto"
                      },
                      "ticker": {
                        "type": "string",
                        "example": "X:00USD"
                      },
                      "currency_name": {
                        "type": "string",
                        "example": "United States dollar"
                      },
                      "currency_symbol": {
                        "type": "string",
                        "example": "USD"
                      },
                      "last_updated_utc": {
                        "type": "string",
                        "example": "2017-01-01T00:00:00Z"
                      },
                      "base_currency_name": {
                        "type": "string",
                        "example": "00 Token"
                      },
                      "base_currency_symbol": {
                        "type": "string",
                        "example": "00"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ListTickersResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "message": {
          "type": "string",
          "example": "Request Successful"
        },
        "body": {
          "type": "object",
          "properties": {
            "tickers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ticker": {
                    "type": "string",
                    "example": "X:1INCHUSD"
                  },
                  "name": {
                    "type": "string",
                    "example": "1inch - United States dollar"
                  },
                  "market": {
                    "type": "string",
                    "example": "crypto"
                  },
                  "locale": {
                    "type": "string",
                    "example": "global"
                  },
                  "active": {
                    "type": "boolean",
                    "example": true
                  },
                  "currency_symbol": {
                    "type": "string",
                    "example": "USD"
                  },
                  "currency_name": {
                    "type": "string",
                    "example": "United States dollar"
                  },
                  "base_currency_symbol": {
                    "type": "string",
                    "example": "1INCH"
                  },
                  "base_currency_name": {
                    "type": "string",
                    "example": "1inch"
                  },
                  "last_updated_utc": {
                    "type": "string",
                    "example": "2017-01-01T00:00:00Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "InitFundWalletPayload": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 50
        },
        "crpto_currency": {
          "type": "string",
          "example": "btc"
        }
      }
    },
    "InitFundWalletResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Request successful."
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "transaction": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 44
                },
                "ref": {
                  "type": "string",
                  "example": "5184672575"
                },
                "wallet_id": {
                  "type": "number",
                  "example": 3
                },
                "user_id": {
                  "type": "string",
                  "example": "94b34bd3-de31-48d2-90b7-c0e8cbb12ccf"
                },
                "amount": {
                  "type": "string",
                  "example": "50.00"
                },
                "type": {
                  "type": "string",
                  "example": "credit"
                },
                "status": {
                  "type": "string",
                  "example": "pending"
                },
                "livemode": {
                  "type": "boolean",
                  "example": true
                },
                "desc": {
                  "type": "string",
                  "example": "Fund wallet with USD50 using btc"
                },
                "metadata": {
                  "type": "string",
                  "example": "{\"payment_id\":\"5184672575\",\"payment_status\":\"waiting\",\"pay_address\":\"3MFfJhfC2jGut3oExpVt6XLcR32jGVXRa7\",\"price_amount\":50,\"price_currency\":\"usd\",\"pay_amount\":0.00050976,\"amount_received\":48.302741,\"pay_currency\":\"btc\",\"order_id\":null,\"order_description\":\"Wallet funding of USD50 from 0 using btc\",\"payin_extra_id\":null,\"ipn_callback_url\":null,\"customer_email\":null,\"created_at\":\"2025-02-12T23:16:19.948Z\",\"updated_at\":\"2025-02-12T23:16:19.948Z\",\"purchase_id\":\"5611424752\",\"smart_contract\":null,\"network\":\"btc\",\"network_precision\":null,\"time_limit\":null,\"burning_percent\":null,\"expiration_estimate_date\":\"2025-02-12T23:36:19.948Z\",\"is_fixed_rate\":false,\"is_fee_paid_by_user\":false,\"valid_until\":\"2025-02-19T23:16:19.948Z\",\"type\":\"crypto2crypto\",\"product\":\"api\",\"origin_ip\":\"105.112.113.149\"}"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2025-02-12T23:16:19.449Z"
                },
                "created_at": {
                  "type": "string",
                  "example": "2025-02-12T23:16:19.449Z"
                },
                "payment_methods": {}
              }
            }
          }
        }
      }
    },
    "InitPayoutPayload": {
      "type": "object",
      "properties": {
        "amount_in_usd": {
          "type": "number",
          "example": 2
        },
        "crypto_currency": {
          "type": "string",
          "example": "btc"
        },
        "wallet_address": {
          "type": "string",
          "example": "gufogewyfiuowehifgiyvwef"
        }
      }
    },
    "InitPayoutResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "5000000713"
        },
        "withdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "is_request_payouts": {
                "type": "boolean",
                "example": false
              },
              "id": {
                "type": "string",
                "example": "5000000000"
              },
              "address": {
                "type": "string",
                "example": "TEmGwPeRTPiLFLVfBxXkSP91yc5GMNQhfS"
              },
              "currency": {
                "type": "string",
                "example": "trx"
              },
              "amount": {
                "type": "string",
                "example": "200"
              },
              "batch_withdrawal_id": {
                "type": "string",
                "example": "5000000000"
              },
              "ipn_callback_url": {
                "type": "string",
                "example": "https://nowpayments.io"
              },
              "status": {
                "type": "string",
                "example": "WAITING"
              },
              "extra_id": {},
              "hash": {},
              "error": {},
              "payout_description": {},
              "unique_external_id": {},
              "created_at": {
                "type": "string",
                "example": "2020-11-12T17:06:12.791Z"
              },
              "requested_at": {},
              "updated_at": {}
            }
          }
        }
      }
    },
    "SumSubWebhookPayload": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string",
          "example": "applicant.statusChanged"
        },
        "payload": {
          "type": "object",
          "properties": {
            "applicantId": {
              "type": "string",
              "example": "b134f12e-983e-4b7f-b77d-d4c983a9cf44"
            },
            "status": {
              "type": "string",
              "example": "verified"
            },
            "reason": {
              "type": "string",
              "example": "All documents are valid"
            }
          }
        }
      }
    },
    "SubmitKYCPayload": {
      "type": "object",
      "properties": {
        "document_type": {
          "type": "number",
          "example": 0
        },
        "frontFile": {
          "type": "string",
          "example": "string"
        },
        "backFile": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "SubmitKYCResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "KYC submitted successfully"
        },
        "status": {
          "type": "number",
          "example": 201
        },
        "body": {
          "type": "object",
          "properties": {
            "kyc": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "abcd1234-efgh-5678-ijkl-9012mnop3456"
                },
                "user_id": {
                  "type": "string",
                  "example": "user-uuid"
                },
                "document_type": {
                  "type": "string",
                  "example": "Passport"
                },
                "front_file_url": {
                  "type": "string",
                  "example": "https://cdn.example.com/kyc/front.jpg"
                },
                "back_file_url": {
                  "type": "string",
                  "example": "https://cdn.example.com/kyc/back.jpg"
                },
                "status": {
                  "type": "string",
                  "example": "pending"
                },
                "created_at": {
                  "type": "string",
                  "example": "2025-04-19T10:00:00.000Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2025-04-19T10:00:00.000Z"
                }
              }
            }
          }
        }
      }
    },
    "GetUserKYCResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "KYC data retrieved successfully"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "kyc": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "abcd1234-efgh-5678-ijkl-9012mnop3456"
                },
                "user_id": {
                  "type": "string",
                  "example": "user-uuid"
                },
                "document_type": {
                  "type": "string",
                  "example": "Passport"
                },
                "front_file_url": {
                  "type": "string",
                  "example": "https://cdn.example.com/kyc/front.jpg"
                },
                "back_file_url": {
                  "type": "string",
                  "example": "https://cdn.example.com/kyc/back.jpg"
                },
                "status": {
                  "type": "number",
                  "example": 0
                },
                "rejection_reason": {},
                "created_at": {
                  "type": "string",
                  "example": "2025-04-19T10:00:00.000Z"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2025-04-19T10:00:00.000Z"
                }
              }
            }
          }
        }
      }
    },
    "GetAllKYCsResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "All KYCs retrieved successfully"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "kycs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "abcd1234-efgh-5678-ijkl-9012mnop3456"
                  },
                  "user": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "user-uuid"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "Jane"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Doe"
                      },
                      "email": {
                        "type": "string",
                        "example": "jane@example.com"
                      }
                    }
                  },
                  "document_type": {
                    "type": "string",
                    "example": "Passport"
                  },
                  "front_file_url": {
                    "type": "string",
                    "example": "https://cdn.example.com/kyc/front.jpg"
                  },
                  "back_file_url": {
                    "type": "string",
                    "example": "https://cdn.example.com/kyc/back.jpg"
                  },
                  "status": {
                    "type": "number",
                    "example": 0
                  },
                  "rejection_reason": {},
                  "created_at": {
                    "type": "string",
                    "example": "2025-04-19T10:00:00.000Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2025-04-19T10:00:00.000Z"
                  }
                }
              }
            }
          }
        }
      }
    },
    "VerifyKYCResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "KYC verified successfully"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "kyc": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "abcd1234-efgh-5678-ijkl-9012mnop3456"
                },
                "status": {
                  "type": "string",
                  "example": "verified"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2025-04-19T11:00:00.000Z"
                }
              }
            }
          }
        }
      }
    },
    "RejectKYCResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "KYC rejected successfully"
        },
        "status": {
          "type": "number",
          "example": 200
        },
        "body": {
          "type": "object",
          "properties": {
            "kyc": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "abcd1234-efgh-5678-ijkl-9012mnop3456"
                },
                "status": {
                  "type": "string",
                  "example": "rejected"
                },
                "rejection_reason": {
                  "type": "string",
                  "example": "Invalid document clarity"
                },
                "updated_at": {
                  "type": "string",
                  "example": "2025-04-19T11:05:00.000Z"
                }
              }
            }
          }
        }
      }
    },
    "DeleteKYCResponse": {}
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}